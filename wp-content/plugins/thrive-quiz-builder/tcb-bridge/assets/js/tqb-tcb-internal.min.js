/*! Thrive Quiz Builder - 2022-01-25
* http://www.thrivethemes.com/
* Copyright (c) 2022 Thrive Themes */
!function(a){"use strict";var b,c,d,e,f,g={".js":[],".json":[],".css":[],".html":[]},h="function"==typeof require?require:null;return e=function(a){var b=new Error("Could not find module '"+a+"'");return b.code="MODULE_NOT_FOUND",b},f=function(a,b,c){var d,e;if("function"==typeof a[b+c])return b+c;for(d=0;e=g[c][d];++d)if("function"==typeof a[b+e])return b+e;return null},b=function(a,d,g,h,i,j){var k,l,m,n,o,p;for(g=g.split("/"),k=g.pop(),"."!==k&&".."!==k||(g.push(k),k="");null!=(l=g.shift());)if(l&&"."!==l&&(".."===l?(a=d.pop(),j=j.slice(0,j.lastIndexOf("/"))):(d.push(a),a=a[l],j+="/"+l),!a))throw e(h);if(k&&"function"!=typeof a[k]&&(p=f(a,k,".js"),p||(p=f(a,k,".json")),p||(p=f(a,k,".css")),p||(p=f(a,k,".html")),p?k=p:2!==i&&"object"==typeof a[k]&&(d.push(a),a=a[k],j+="/"+k,k="")),!k)return 1!==i&&a[":mainpath:"]?b(a,d,a[":mainpath:"],h,1,j):b(a,d,"index",h,2,j);if(!(o=a[k]))throw e(h);return o.hasOwnProperty("module")?o.module.exports:(m={},o.module=n={exports:m,id:j+"/"+k},o.call(m,m,n,c(a,d,j)),n.exports)},d=function(c,d,f,g){var i,j=f,k=f.charAt(0),l=0;if("/"===k){if(j=j.slice(1),!(c=a["/"])){if(h)return h(f);throw e(f)}g="/",d=[]}else if("."!==k){if(i=j.split("/",1)[0],!(c=a[i])){if(h)return h(f);throw e(f)}g=i,d=[],j=j.slice(i.length+1),j||(j=c[":mainpath:"],j?l=1:(j="index",l=2))}return b(c,d,j,f,l,g)},(c=function(a,b,c){return function(e){return d(a,[].concat(b),e,c)}})(a,[],"")}({workspace:{"tcb-bridge":{assets:{js:{internal:{"_utils.js":function(exports,module,require){eval("/**\n * Created by Ovidiu on 6/27/2017.\n */\n( function ( $ ) {\n\tmodule.exports = {\n\n\t\t/**\n\t\t * Show / Hide Dynamic Content Element\n\t\t */\n\t\tshow_hide_dynamic_content_element: function () {\n\t\t\tvar $element = jQuery( '.tve-element[data-elem=\"tqb_dynamic_content\"]' );\n\n\t\t\tif ( TVE.inner_$( '.tqb-dynamic-content-container' ).length > 0 ) {\n\t\t\t\t$element.addClass( 'tve-hide' );\n\t\t\t} else {\n\t\t\t\t$element.removeClass( 'tve-hide' );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Show / Hide Social Share Badge Element\n\t\t */\n\t\tshow_hide_social_share_badge_element: function () {\n\t\t\tvar $element = jQuery( '.tve-element[data-elem=\"tqb_social_share_badge\"]' );\n\n\t\t\tif ( TVE.inner_$( '.tqb-social-share-badge-container' ).length > 0 ) {\n\t\t\t\t$element.addClass( 'tve-hide' );\n\t\t\t} else {\n\t\t\t\t$element.removeClass( 'tve-hide' );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Checks if a string is an integer number\n\t\t *\n\t\t * @param value\n\t\t * @returns {boolean|*}\n\t\t */\n\t\tis_integer_number: function ( value ) {\n\t\t\treturn Math.floor( value ) == value && $.isNumeric( value );\n\t\t},\n\n\t\t/**\n\t\t * actions related to a state\n\t\t * @param data\n\t\t * @param ajax_param\n\t\t * @returns {*}\n\t\t */\n\t\tstate_ajax: function ( data, ajax_param ) {\n\t\t\tvar params = {\n\t\t\t\ttype: 'post',\n\t\t\t\tdataType: 'json',\n\t\t\t\turl: tqb_page_data.ajaxurl\n\t\t\t};\n\n\t\t\tdata.action = tqb_page_data.state_action;\n\t\t\tdata.variation_id = data.variation_id || tqb_page_data.variation_id;\n\t\t\tdata.page_id = tqb_page_data.page_id;\n\t\t\tdata.security = tqb_page_data.security;\n\t\t\tdata.tqb_key = true;  // This flag set to true for the tqb-class-hooks.php to be included\n\t\t\tparams.data = data;\n\n\t\t\tif ( ajax_param ) {\n\t\t\t\tfor ( var k in ajax_param ) {\n\t\t\t\t\tparams[ k ] = ajax_param[ k ];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn jQuery.ajax( params, data );\n\t\t},\n\n\t\ttpl_ajax: function ( data, ajax_param, no_loader ) {\n\t\t\tvar params = {\n\t\t\t\ttype: 'post',\n\t\t\t\tdataType: 'json',\n\t\t\t\turl: tqb_page_data.ajaxurl\n\t\t\t};\n\t\t\tif ( typeof no_loader === 'undefined' || ! no_loader ) {\n\t\t\t\tTVE.main.overlay();\n\t\t\t}\n\t\t\tdata.action = tqb_page_data.tpl_action;\n\t\t\tdata.variation_id = data.variation_id || tqb_page_data.variation_id;\n\t\t\tdata.page_id = tqb_page_data.page_id;\n\t\t\tdata.security = tqb_page_data.security;\n\t\t\tdata.tqb_key = true;  // This flag set to true for the tqb-class-hooks.php to be included\n\t\t\tparams.data = data;\n\n\t\t\tif ( ajax_param ) {\n\t\t\t\tfor ( var k in ajax_param ) {\n\t\t\t\t\tparams[ k ] = ajax_param[ k ];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn jQuery.ajax( params, data );\n\t\t},\n\n\t\t/**\n\t\t * Insert the response that comes from the states\n\t\t *\n\t\t * @param response\n\t\t */\n\t\tinsertStateResponse: function ( response ) {\n\t\t\tTVE.inner_$( '.tqb-dynamic-content-container' ).attr( 'tqb-saved', 'true' );\n\t\t\t/**\n\t\t\t * javascript page data\n\t\t\t */\n\t\t\ttqb_page_data = jQuery.extend( tqb_page_data, response.tqb_page_data, true );\n\n\t\t\t/**\n\t\t\t State bar is only for the result page\n\t\t\t */\n\t\t\tif ( response.state_bar ) {\n\t\t\t\tjQuery( '#tqb-form-states' ).html( response.state_bar );\n\t\t\t}\n\n\t\t\t/*Popover trigger*/\n\t\t\tthis.popover();\n\n\t\t\tthis.hover_numeric_range_preview();\n\t\t},\n\n\t\tinsertResponse: function ( response ) {\n\t\t\tvar self = this;\n\t\t\t/** custom CSS */\n\t\t\tTVE.inner_$( '.tve_custom_style,.tve_user_custom_style' ).remove();\n\t\t\tTVE.CSS_Rule_Cache.clear();\n\n\t\t\t/**\n\t\t\t * Clear also the Global Rules\n\t\t\t */\n\t\t\tTVE.USE_GLOBALSHEET = true;\n\t\t\tTVE.CSS_Rule_Cache.clear();\n\t\t\tTVE.USE_GLOBALSHEET = false;\n\n\t\t\t/**\n\t\t\t * Refresh the style node\n\t\t\t */\n\t\t\tTVE.Editor_Page.content_manager.refresh_global_style_node();\n\n\t\t\tTVE.inner_$( 'head' ).append( response.custom_css );\n\n\t\t\t/**\n\t\t\t * checks if all the added CSS <link> elements are available (finished loading and applied)\n\t\t\t *\n\t\t\t * @param {jQuery} $jq_links collection of added <link> nodes\n\t\t\t * @param {Function} complete_callback\n\t\t\t */\n\t\t\tfunction check_loaded( $jq_links, complete_callback ) {\n\t\t\t\tvar all_loaded = true;\n\t\t\t\twindow.tqb_loaded_count = window.tqb_loaded_count || 1;\n\t\t\t\twindow.tqb_loaded_count ++;\n\t\t\t\t$jq_links.each( function () {\n\n\t\t\t\t\t/** firefox throws an Error when testing this condition and the css is not loaded yet */\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif ( ! this[ sheet ] || ! this[ sheet ][ cssRules ] || ! this[ sheet ][ cssRules ].length ) {\n\t\t\t\t\t\t\tall_loaded = false;\n\t\t\t\t\t\t\treturn false; // break the loop\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\tall_loaded = false;\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tif ( all_loaded || window.tqb_loaded_count > 40 ) {\n\t\t\t\t\tcomplete_callback();\n\t\t\t\t} else {\n\t\t\t\t\tsetTimeout( function () {\n\t\t\t\t\t\tcheck_loaded( $jq_links, complete_callback );\n\t\t\t\t\t}, 500 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * callback to be applied when all css files are loaded and available\n\t\t\t */\n\t\t\tfunction on_resources_loaded() {\n\t\t\t\t/**\n\t\t\t\t * javascript page data\n\t\t\t\t */\n\t\t\t\ttqb_page_data = jQuery.extend( tqb_page_data, response.tqb_page_data, true );\n\n\n\t\t\t\tTVE.inner_$( '#tqb-editor-replace' ).replaceWith( response.main_page_content );\n\t\t\t\tjQuery( '#tqb-form-states' ).empty();\n\n\t\t\t\tTVE.Editor_Page.initEditorActions();\n\n\t\t\t\tself.show_hide_dynamic_content_element();\n\t\t\t\tself.show_hide_social_share_badge_element();\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * browser-compliant way of accessing stylesheet rules\n\t\t\t */\n\t\t\tvar sheet, cssRules, _link = document.createElement( 'link' );\n\t\t\tif ( 'sheet' in _link ) {\n\t\t\t\tsheet = 'sheet';\n\t\t\t\tcssRules = 'cssRules';\n\t\t\t} else {\n\t\t\t\tsheet = 'styleSheet';\n\t\t\t\tcssRules = 'rules';\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Add Stylesheets to iFrame\n\t\t\t */\n\t\t\tvar found = false,\n\t\t\t\t$css_list = jQuery();\n\t\t\tTVE.inner_$.each( response.css, function ( _id, href ) {\n\t\t\t\tif ( ! TVE.inner_$( 'link#' + _id + '-css' ).length ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tvar $link = TVE.inner_$( '<link />', {\n\t\t\t\t\t\trel: 'stylesheet',\n\t\t\t\t\t\ttype: 'text/css',\n\t\t\t\t\t\tid: _id + '-css',\n\t\t\t\t\t\thref: href\n\t\t\t\t\t} ).appendTo( 'head' );\n\t\t\t\t\t/* for some reason, <link>s from google fonts always have empty cssRules fields - we cannot be sure when those are loaded using the check_loaded function */\n\t\t\t\t\tif ( href.indexOf( 'fonts.googleapis' ) === - 1 ) {\n\t\t\t\t\t\t$css_list = $css_list.add( $link );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tif ( found ) {\n\t\t\t\tcheck_loaded( $css_list, on_resources_loaded );\n\t\t\t} else {\n\t\t\t\ton_resources_loaded()\n\t\t\t}\n\t\t},\n\n\t\tpopover: function () {\n\t\t\tvar $popover_selector = $( '.tqb-tcb-intervals-item' );\n\n\t\t\tif ( $popover_selector.data( 'bs.popover' ) ) {\n\t\t\t\t$popover_selector.popover( 'destroy' );\n\t\t\t}\n\t\t\t$popover_selector.popover( {} );\n\n\t\t\t$popover_selector.on( 'click', function ( e ) {\n\t\t\t\t$popover_selector.not( this ).popover( 'hide' );\n\t\t\t} );\n\t\t},\n\n\t\t/**\n\t\t * Hover functionality. Numeric Range Preview\n\t\t */\n\t\thover_numeric_range_preview: function () {\n\t\t\t$( '.tqb-tcb-intervals-item' ).hover(\n\t\t\t\tfunction () {\n\t\t\t\t\tvar $this = $( this );\n\t\t\t\t\tif ( ! $this.hasClass( 'tqb-tcb-intervals-item-active' ) ) {\n\t\t\t\t\t\t$( '.tqb-tcb-numeric-range-preview[data-id=\"' + $this.attr( 'data-id' ) + '\"]' ).css( 'visibility', 'visible' );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tfunction () {\n\t\t\t\t\tvar $this = $( this );\n\t\t\t\t\tif ( ! $this.hasClass( 'tqb-tcb-intervals-item-active' ) ) {\n\t\t\t\t\t\t$( '.tqb-tcb-numeric-range-preview[data-id=\"' + $this.attr( 'data-id' ) + '\"]' ).css( 'visibility', 'hidden' );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t}\n} )( jQuery );\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/_utils.js")},"dynamic-content-component.js":function(exports,module,require){eval("/**\n * Created by Ovidiu on 6/26/2017.\n */\n\nmodule.exports = TVE.Views.Base.component.extend( {\n\tcontrols_init: function () {\n\t},\n\tplaceholder_action: function () {\n\t\tvar modal = TQB.ResultIntervals.get_instance( TVE.modal.get_element( 'result-intervals' ) );\n\t\tmodal.open( {\n\t\t\ttop: '20%',\n\t\t\tdismissible: false\n\t\t} );\n\t}\n} );\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/dynamic-content-component.js")},"main.js":function(exports,module,require){eval("/**\n * Created by Ovidiu on 6/26/2017.\n */\n\t//var TVE = window.TVE || {};\n\nvar TQB = window.TQB = TQB || {};\nvar RESULT_TAG = '%result%';\n\n/**\n * We have to use important here to override default borders and corners\n */\nfunction onBordersCornersUpdate( $element, css ) {\n\tif ( $element.is( '.tqb-btn1, .tqb-btn-start' ) ) {\n\t\t_.each( css, function ( val, prop ) {\n\t\t\tvar style = {};\n\n\t\t\tstyle[ prop ] = val + '!important';\n\n\t\t\t$element.head_css( style, null, ' .tcb-button-link' );\n\t\t} );\n\t}\n}\n\n( function ( $ ) {\n\n\t/**\n\t * On TCB Main Ready\n\t */\n\t$( window ).on( 'tcb_main_ready', function () {\n\t\tTVE.Views.Components.tqb_dynamic_content = require( './dynamic-content-component' );\n\t\tTVE.Views.Components.tqb_social_share_badge = require( './social-share-badge-component' );\n\n\t\tTQB.ResultIntervals = require( './modals/result-intervals' );\n\t\tTQB.EqualizeIntervals = require( './modals/equalize-intervals' );\n\t\tTQB.ImportInterval = require( './modals/import-interval' );\n\t\tTQB.RemoveInterval = require( './modals/remove-interval' );\n\t\tTQB.DeleteDynamicContent = require( './modals/delete-dynamic-content' );\n\t\tTQB.VariationTemplates = require( './modals/variation-templates' );\n\t\tTQB.VariationReset = require( './modals/variation-reset' );\n\t\tTQB.VariationSave = require( './modals/variation-save' );\n\t\tTQB.SocialShareBadgeTemplates = require( './modals/social-share-badge-templates' );\n\t\tTQB.SaveValidation = require( './modals/save-validation' );\n\n\n\t\tif ( tqb_page_data.allow_tqb_advanced ) {\n\t\t\tTVE.add_filter( 'main_ajax_callback', function () {\n\t\t\t\tvar _states = require( './states' );\n\t\t\t\tTQB.States = new _states( {\n\t\t\t\t\tel: jQuery( '#tqb-form-states' )[ 0 ]\n\t\t\t\t} );\n\t\t\t\tTQB.States.click_first_state();\n\t\t\t} );\n\t\t}\n\n\t\tTVE.add_filter( 'tcb_head_css_suffix', function ( sufix, _this, rules ) {\n\n\t\t\tif ( _this.is( '.tqb-btn1' ) ) {\n\t\t\t\tsufix = '.tqb-btn1 .tcb-button-link'\n\t\t\t}\n\n\t\t\treturn sufix;\n\t\t} );\n\n\t\t/**\n\t\t * Push the default args for quiz result shortcode\n\t\t */\n\t\tTVE.add_filter( 'tcb.inline_shortcodes.insert', function ( shortcode_data ) {\n\n\t\t\tif ( shortcode_data.key === 'tqb_quiz_result' ) {\n\t\t\t\tvar result_type = null;\n\n\t\t\t\tObject.values( shortcode_data.configOptions ).forEach( function ( item, index ) {\n\t\t\t\t\tif ( item.key === 'result_type' ) {\n\t\t\t\t\t\tresult_type = item.key;\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tif ( result_type === null ) {\n\t\t\t\t\tshortcode_data.configOptions.push( {\n\t\t\t\t\t\tkey: 'result_type',\n\t\t\t\t\t\tvalue: 'default'\n\t\t\t\t\t} )\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn shortcode_data\n\t\t} );\n\n\t\t/**\n\t\t * Push tqb inline shortcodes in SHORTCODE_GROUP_ORDER_MAP\n\t\t */\n\t\tTVE.add_filter( 'tcb.inline_shortcodes.shortcode_group', function ( shortcode_group ) {\n\n\t\t\tshortcode_group.push( 'Quiz Shortcodes' );\n\n\t\t\treturn shortcode_group;\n\t\t} );\n\n\t\t/**\n\t\t * Filter that hooks into dropzone elements.\n\t\t *\n\t\t * Makes the TQB Dynamic Content Element a dropzone element\n\t\t */\n\t\tTVE.add_filter( 'dropzone_elements', function ( dropzone_elements ) {\n\n\t\t\tdropzone_elements += ', .tqb-content-inner';\n\n\t\t\treturn dropzone_elements;\n\t\t} );\n\n\t\t/**\n\t\t * Stops Architect changing the CSS IDS of template items\n\t\t */\n\t\tTVE.add_filter( 'set_new_css_id', function ( found_in_media, css_id ) {\n\n\t\t\tvar templatesCssIDs = [\n\t\t\t\t//Splash Page\n\t\t\t\t'tve-u-15d98a0f942',\n\t\t\t\t'tve-u-16d0147a7a2',\n\t\t\t\t'tve-u-15d989f6884',\n\t\t\t\t'tve-u-15d989d84f1',\n\t\t\t\t'tve-u-15d97b7ed92',\n\t\t\t\t'tve-u-15d97b6e7eb',\n\t\t\t\t'tve-u-15d98a42994',\n\t\t\t\t'tve-u-15d98a44924',\n\t\t\t\t'tve-u-16d62438e23',\n\t\t\t\t//Optin\n\t\t\t\t'tve-u-15d9c642540',\n\t\t\t\t'tve-u-15d9c6036f5',\n\t\t\t\t'tve-u-15d9c601f22',\n\t\t\t\t'tve-u-15d9c5ff0a7',\n\t\t\t\t'tve-u-15d9c5d0206',\n\t\t\t\t'tve-u-15d9c5b8e9e',\n\t\t\t\t'tve-u-15d9c5aced7',\n\t\t\t\t'tve-u-15d9c5aced3',\n\t\t\t\t'tve-u-15d9c5854a2',\n\t\t\t\t'tve-u-15d9c82267d',\n\n\t\t\t\t'tve-u-16d2038b625',\n\t\t\t\t'tve-u-16d2038120d',\n\t\t\t\t'tve-u-16d20383b95',\n\t\t\t\t'tve-u-16d204198f1',\n\t\t\t\t'tve-u-16d632405fa',\n\t\t\t\t'tve-u-16d678d5a2c',\n\t\t\t\t//Result\n\t\t\t\t'tve-u-16d3eaaa219',\n\t\t\t\t'tve-u-15d9cfb7ca3',\n\t\t\t\t'tve-u-15d9cfa5375',\n\t\t\t\t'tve-u-15d9cf7c493',\n\t\t\t\t'tve-u-15d9cf56168',\n\t\t\t\t'tve-u-15d9cf46613',\n\t\t\t\t'tve-u-15d9cf3d12a',\n\t\t\t\t'tve-u-15d9d12e9b1',\n\t\t\t\t'tve-u-15d9d4d1def',\n\t\t\t\t'tve-u-15d9d4bd1a0',\n\t\t\t\t'tve-u-15d9d4b698f',\n\t\t\t\t'tve-u-15d9d4b698c',\n\t\t\t\t'tve-u-15d9d49ce6b',\n\t\t\t\t'tve-u-15d9d485f0a',\n\t\t\t\t'tve-u-15d9d47e72b',\n\t\t\t\t'tve-u-15d9d88f49c',\n\t\t\t\t'tve-u-16d15588a8e'\n\t\t\t];\n\n\t\t\tif ( jQuery.inArray( css_id, templatesCssIDs ) !== - 1 ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn found_in_media;\n\t\t} );\n\n\t\t/**\n\t\t * Add Dynamic Content Element to no save elements\n\t\t */\n\t\tTVE.add_filter( 'selectors_no_save', function ( selectors ) {\n\n\t\t\tselectors += ', .tqb-dynamic-content-container';\n\n\t\t\treturn selectors;\n\t\t} );\n\n\t\tfunction open_templates_modal() {\n\t\t\tTQB.VariationTemplates.get_instance( TVE.modal.get_element( 'variation-templates' ) ).open( {\n\t\t\t\ttop: '10%',\n\t\t\t\tdismissible: ( tqb_page_data.has_content )\n\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t * Save form heights on splash pages so we can display placeholder\n\t\t */\n\t\tTVE.add_filter( 'tcb_save_post_data_before', function ( data ) {\n\n\t\t\tif ( TVE.CONST.post_type === 'tqb_splash' ) {\n\t\t\t\tvar sizes = {\n\t\t\t\t\tm: '420px',\n\t\t\t\t\tt: '1023px',\n\t\t\t\t\td: '1366px'\n\t\t\t\t}\n\n\t\t\t\tdata[ 'form-height' ] = {};\n\t\t\t\tvar $container = TVE.Editor_Page.editor.find( '.tve_editor_main_content' ),\n\t\t\t\t\tinitialWidth = TVE.main.$frame.width();\n\n\t\t\t\tif ( $container.length === 0 ) {\n\t\t\t\t\t$container = TVE.Editor_Page.editor;\n\t\t\t\t}\n\n\t\t\t\t/* fox for margin collapse */\n\t\t\t\t$container.css( 'border', '1px solid transparent' )\n\n\t\t\t\t/* save form height so we can prepare a placeholder for it. */\n\t\t\t\tfor ( var device in sizes ) {\n\t\t\t\t\tTVE.main.$frame.width( sizes[ device ] );\n\t\t\t\t\tdata[ 'form-height' ][ device ] = $container.outerHeight( true );\n\t\t\t\t}\n\n\t\t\t\t$container.css( 'border', '' )\n\n\t\t\t\tTVE.main.$frame.width( initialWidth );\n\t\t\t}\n\n\t\t\treturn data;\n\t\t} );\n\n\t\tTVE.add_filter( 'editor_loaded_callback', function () {\n\n\t\t\t$( TVE.main ).on( 'tcb.open_templates_picker', function ( event ) {\n\t\t\t\topen_templates_modal();\n\t\t\t\tevent.preventDefault();\n\t\t\t} );\n\n\t\t\t/**\n\t\t\t * Open Template Chooser if the variation is empty\n\t\t\t */\n\t\t\tif ( ! tqb_page_data.has_content ) {\n\t\t\t\topen_templates_modal();\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * If the variation has content search for dynamic content elements and social share element.\n\t\t\t\t * If it is present on the page, hide them from the menu bar\n\t\t\t\t */\n\n\t\t\t\tif ( TVE.inner_$( '.tqb-dynamic-content-container' ).length > 0 ) {\n\t\t\t\t\tjQuery( '.tve-element[data-elem=\"tqb_dynamic_content\"]' ).addClass( 'tve-hide' );\n\t\t\t\t}\n\n\t\t\t\tif ( TVE.inner_$( '.tqb-social-share-badge-container' ).length > 0 ) {\n\t\t\t\t\tjQuery( '.tve-element[data-elem=\"tqb_social_share_badge\"]' ).addClass( 'tve-hide' );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tTVE.main.sidebar_extra.tqb_save_template = function () {\n\t\t\t\tvar variationSaveModal = TQB.VariationSave.get_instance( TVE.modal.get_element( 'variation-save' ) );\n\t\t\t\tvariationSaveModal.open( {\n\t\t\t\t\ttop: '20%'\n\t\t\t\t} );\n\t\t\t};\n\n\t\t\tTVE.main.sidebar_extra.tqb_reset_template = function () {\n\t\t\t\tTVE.main.sidebar_extra.hide_drawers();\n\t\t\t\tvar variationResetsModal = TQB.VariationReset.get_instance( TVE.modal.get_element( 'variation-reset' ) );\n\t\t\t\tvariationResetsModal.open( {\n\t\t\t\t\ttop: '20%'\n\t\t\t\t} );\n\t\t\t};\n\n\t\t} );\n\n\t\tTVE.add_filter( 'element_drop', function ( $element ) {\n\t\t\tif ( $element.hasClass( 'tqb-dynamic-content-container' ) ) {\n\t\t\t\tif ( tqb_page_data.is_personality_type ) {\n\t\t\t\t\tTQB.States.generate_personality_states();\n\t\t\t\t} else {\n\t\t\t\t\tvar dynamicContent = TQB.ResultIntervals.get_instance( TVE.modal.get_element( 'result-intervals' ) );\n\t\t\t\t\tdynamicContent.open( {\n\t\t\t\t\t\ttop: '20%',\n\t\t\t\t\t\tdismissible: false\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( $element.hasClass( 'tqb-social-share-badge-container' ) ) {\n\t\t\t\tif ( $element.closest( '.tqb-dynamic-content-container' ).length ) {\n\t\t\t\t\t$element.remove();\n\t\t\t\t\tTVE.page_message( 'Social share element can not be dropped inside dynamic content element!', 2, 5000 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $element;\n\t\t} );\n\n\t\tTVE.add_filter( 'allow_remove', function ( return_default_value, params ) {\n\t\t\tvar $element = params[ 0 ];\n\t\t\tif ( $element.hasClass( 'tqb-dynamic-content-container' ) ) {\n\t\t\t\tTQB.States.delete_states();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t} );\n\n\t\tTVE.add_action( 'tcb.element.remove', function ( $element ) {\n\n\t\t\t// Delete dynamic content if is inside another element.\n\t\t\tif ( $element.find( '.tqb-dynamic-content-container' ).length ) {\n\t\t\t\tTQB.States.delete_all_states();\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Show Social Share Badge Element on Delete\n\t\t\t */\n\t\t\tif ( $element.hasClass( 'tqb-social-share-badge-container' ) || $element.find( '.tqb-social-share-badge-container' ).length ) {\n\t\t\t\tjQuery( '.tve-element[data-elem=\"tqb_social_share_badge\"]' ).removeClass( 'tve-hide' );\n\t\t\t}\n\t\t} );\n\n\t\tTVE.add_action( 'tcb.border_update.button', onBordersCornersUpdate );\n\n\t\tTVE.add_action( 'tcb_action_corners_added', onBordersCornersUpdate );\n\n\t\tTVE.add_filter( 'tcb.write.shadow.suffix.tqb_page', function ( css_suffix, css_attribute ) {\n\n\t\t\tcss_suffix = '.tve-tqb-page-type';\n\n\t\t\treturn css_suffix;\n\t\t} );\n\n\t\tTVE.add_filter( 'validate_saved_content', function () {\n\n\t\t\tif ( tqb_page_data.variation_type === 'splash' || tqb_page_data.variation_type === 'optin' ) {\n\n\t\t\t\tif ( TVE.Editor_Page.editor.find( '.tqb-shortcode-submit-action' ).length > 0 ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif ( TVE.Editor_Page.editor.find( '.thrv_lead_generation form' ).length > 0 ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tvar is_next_step = false;\n\t\t\t\tTVE.Editor_Page.editor.find( '.tve_evt_manager_listen' ).each( function ( index ) {\n\t\t\t\t\tvar event_string = $( this ).attr( 'data-tcb-events' ),\n\t\t\t\t\t\tevents = $.parseJSON( event_string.replace( '__TCB_EVENT_', '' ).replace( '_TNEVE_BCT__', '' ) );\n\n\t\t\t\t\tfor ( var i = 0, len = events.length; i < len; i ++ ) {\n\t\t\t\t\t\tif ( events[ i ].a === 'thrive_quiz_next_step' ) {\n\t\t\t\t\t\t\tis_next_step = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tTVE.Editor_Page.editor.find( '.tve-dynamic-link' ).each( function ( index, item ) {\n\n\t\t\t\t\tvar shortcode = $( this ).attr( 'data-shortcode-id' );\n\n\t\t\t\t\tif ( typeof shortcode === 'string' && shortcode.includes( 'next_step_in_quiz' ) ) {\n\t\t\t\t\t\tis_next_step = true;\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tif ( is_next_step ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tvar SaveValidationModal = TQB.SaveValidation.get_instance( TVE.modal.get_element( 'save-validation' ) );\n\t\t\t\tSaveValidationModal.open( {\n\t\t\t\t\ttop: '20%'\n\t\t\t\t} );\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} );\n\n\t\tTVE.main.on( 'tve.tve_save_post', function ( event ) {\n\n\t\t\tTVE.Editor_Page.editor.find( '.thrv_lead_generation form' ).each( function ( index, form ) {\n\n\t\t\t\t$( form ).find( 'input[name=\"tqb-variation-page_id\"]' ).remove();\n\t\t\t\t$( form ).find( 'input[name=\"tqb-variation-variation_id\"]' ).remove();\n\t\t\t\t$( form ).find( 'input[name=\"tqb-variation-user_unique\"]' ).remove();\n\n\t\t\t\t$( form ).addClass( 'tqb-form' );\n\t\t\t\tvar data = {\n\t\t\t\t\tpage_id: tqb_page_data.page_id,\n\t\t\t\t\tvariation_id: tqb_page_data.variation_id,\n\t\t\t\t};\n\t\t\t\tvar extra_fields = '<input type=\"hidden\" name=\"tqb-variation-page_id\" class=\"tqb-hidden-form-info\" value=\"' + tqb_page_data.page_id + '\" >';\n\t\t\t\textra_fields += '<input type=\"hidden\" name=\"tqb-variation-variation_id\" class=\"tqb-hidden-form-info\" value=\"' + tqb_page_data.variation_id + '\" >';\n\t\t\t\textra_fields += '<input type=\"hidden\" name=\"tqb-variation-user_unique\" class=\"tqb-hidden-form-info tqb-hidden-user-unique\" value=\"\" >';\n\t\t\t\t$( form ).prepend( extra_fields );\n\t\t\t} );\n\n\t\t} );\n\n\t} );\n\n\tTVE.add_filter( 'tve_form_submit_options', function ( options ) {\n\t\tif ( tqb_page_data.variation_type === 'splash' || tqb_page_data.variation_type === 'optin' ) {\n\t\t\toptions = [\n\t\t\t\t{\n\t\t\t\t\tkey: 'next_step',\n\t\t\t\t\tlabel: TVE.t.NextStepInQuiz,\n\t\t\t\t\tcss_class: 'tcb-lg-option-next_step',\n\t\t\t\t\ticon: 'tqb_next_step'\n\t\t\t\t}\n\t\t\t];\n\t\t}\n\t\treturn options;\n\t} );\n\n\t/**\n\t * Hide connection type for LG Element on Optin\n\t */\n\tTVE.add_action( 'tcb.component.after_init.lead_generation', ( component ) => {\n\t\tif ( tqb_page_data && ( tqb_page_data.variation_type === 'tqb_optin' || tqb_page_data.variation_type === 'tqb_splash' ) ) {\n\t\t\tcomponent.controls.connectionType.$el.hide();\n\t\t}\n\t} );\n\n\tTVE.add_filter( 'tcb.dynamic_image.show_tab', function ( display, $activeElement ) {\n\n\t\t//do not display dynamic tab\n\t\tif ( $activeElement.is( '.tve-tqb-page-type' ) ) {\n\t\t\tdisplay = false\n\t\t}\n\n\t\treturn display;\n\t} );\n\n\tTVE.add_action( 'tcb-ready', function () {\n\t\tTVE.inner_$( '.tve_evt_manager_listen' ).each( function () {\n\t\t\tvar $element = $( this );\n\n\t\t\tif ( $element.data( 'tcb-events' ) && $element.data( 'tcb-events' ).includes( 'thrive_quiz_next_step' ) ) {\n\t\t\t\t$element\n\t\t\t\t\t.removeAttr( 'data-tcb-events' )\n\t\t\t\t\t.removeClass( 'tve_evt_manager_listen' )\n\t\t\t\t\t.removeClass( 'tve_et_click' )\n\t\t\t\t\t.addClass( 'tve-dynamic-link' );\n\n\t\t\t\tif ( ! $element.attr( 'data-shortcode-id' ) ) {\n\t\t\t\t\t$element.attr( 'data-shortcode-id', 'next_step_in_quiz' );\n\t\t\t\t}\n\n\t\t\t\t$element.attr( 'data-dynamic-link', 'tqb_quiz_options' );\n\t\t\t}\n\t\t} );\n\t} );\n\n\n\tif ( [ 'tqb_results', 'tqb_optin' ].includes( TVE.CONST.post.post_type ) ) {\n\t\tTVE.add_action( 'tve-after-api-render', function ( args ) {\n\n\t\t\tif ( typeof args !== 'object' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar $container = args.$container,\n\t\t\t\t$tagsInput = $container.find( '#tve-lg-select-tags' ),\n\t\t\t\ttags = args.api.getConfig( 'tags' ) ? args.api.getConfig( 'tags' ).split( ',' ) : [];\n\n\t\t\tif ( ! $tagsInput.length ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar model = {};\n\n\t\t\tmodel.config = {\n\t\t\t\tlabel: TVE.t.tqb.send_quiz_result,\n\t\t\t\tchecked: tags.includes( RESULT_TAG )\n\t\t\t};\n\n\t\t\tvar view = new TVE.Views.Controls.Switch( {model: model} );\n\n\t\t\tview.input = function ( $element, dom ) {\n\n\t\t\t\tif ( dom.checked ) {\n\t\t\t\t\t$container.find( '.select2-search__field' ).val( RESULT_TAG ).trigger( 'input' );\n\t\t\t\t\t$container.find( '.tve-lg-add-tag' ).click();\n\t\t\t\t\t$container.find( '.select2-search__field' ).val( '' );\n\t\t\t\t} else {\n\t\t\t\t\tvar $resultItem = $container.find( '.select2-selection__choice' )\n\t\t\t\t\t                            .filter( function ( index, item ) {\n\t\t\t\t\t\t                            return $( item ).attr( 'title' ) === RESULT_TAG;\n\t\t\t\t\t                            } );\n\n\t\t\t\t\tif ( $resultItem ) {\n\t\t\t\t\t\t$resultItem.find( '.select2-selection__choice__remove' ).click();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tview.$el.addClass( 'tcb-quiz-options' );\n\t\t\t$tagsInput.closest( '.api-field' ).prepend( view.render().$el );\n\t\t} );\n\n\t\tTVE.add_filter( 'tve.lg.hidden.fields', function ( fieldMapper ) {\n\n\t\t\tfieldMapper.push( {\n\t\t\t\tid: 'mapping_quiz_result',\n\t\t\t} );\n\n\t\t\treturn fieldMapper;\n\t\t} );\n\n\t\tTVE.add_filter( 'tve.lg.hidden.fields.ids', function ( ids ) {\n\n\t\t\tids.push( 'mapping_quiz_result' );\n\n\t\t\treturn ids;\n\t\t} );\n\n\t\tTVE.add_action( 'tve.lg.edit.input', function ( $input, _this ) {\n\n\t\t\tif ( _this.$type.val() === 'mapping_quiz_result' ) {\n\t\t\t\t$input.attr( 'value', RESULT_TAG );\n\t\t\t}\n\n\t\t} );\n\n\t\tTVE.add_action( 'tve.lg.changeType', toggleAutofill );\n\t\tTVE.add_action( 'tve.lg.fields.open', toggleAutofill );\n\n\t\tfunction toggleAutofill( _this, value ) {\n\n\t\t\tif ( 'mapping_quiz_result' !== _this.currentInputData.type ) {\n\n\t\t\t\t_this.smartComplete.$el.find( '.dropdown-content' ).removeClass( 'tqb-relative' );\n\n\t\t\t\tif ( _this.smartComplete.$el.find( '.tqb-notification' ).length ) {\n\t\t\t\t\t_this.smartComplete.$el.find( '.tqb-notification' ).addClass( 'tcb-hidden' );\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_this.smartComplete.$el.find( '.dropdown-content' ).addClass( 'tqb-relative' );\n\n\t\t\tif ( ! _this.smartComplete.$el.find( '.tqb-notification' ).length ) {\n\t\t\t\t_this.smartComplete.$el.find( '.dropdown-content' ).append( TVE.tpl( 'tve-autofill-info' )() );\n\t\t\t}\n\n\t\t\t_this.smartComplete.$el.find( '.tqb-notification' ).removeClass( 'tcb-hidden' );\n\t\t}\n\t}\n} )( jQuery );\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/main.js")},modals:{"delete-dynamic-content.js":function(exports,module,require){eval("/**\n * Created by Ovidiu on 6/28/2017.\n */\nvar _instance = null;\n\nmodule.exports = TVE.modal.base.extend( {\n\tafter_initialize: function () {\n\t\tthis.$el.addClass( 'medium' );\n\t},\n\t/**\n\t * Delete Dynamic Content Modal Callback\n\t * Triggers delete all states function\n\t *\n\t * @param event\n\t * @param dom\n\t */\n\tdelete_all_dynamic_content: function ( event, dom ) {\n\t\tTQB.States.delete_all_states();\n\t\tthis.close();\n\t}\n}, {\n\t/**\n\t * \"Singleton\" implementation for modal instance\n\t *\n\t * @param el\n\t */\n\tget_instance: function ( el ) {\n\t\tif ( ! _instance ) {\n\t\t\t_instance = new TQB.DeleteDynamicContent( {\n\t\t\t\tel: el\n\t\t\t} );\n\t\t}\n\n\t\treturn _instance;\n\t}\n} );\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/modals/delete-dynamic-content.js")},"equalize-intervals.js":function(exports,module,require){eval("/**\n * Created by Ovidiu on 6/27/2017.\n */\nvar _instance = null,\n\t_utils = require( '../_utils' );\n\nmodule.exports = TVE.modal.base.extend( {\n\tafter_initialize: function () {\n\t\tthis.$el.addClass( 'medium' );\n\t},\n\tequalize_intervals: function ( event, dom ) {\n\t\tvar self = this;\n\n\t\t_utils.state_ajax( {\n\t\t\tcustom: 'equalize'\n\t\t} ).done( function ( response ) {\n\t\t\t_utils.insertStateResponse( response );\n\n\t\t\tTQB.States.click_first_state();\n\n\t\t\tself.close();\n\t\t} );\n\t}\n}, {\n\t/**\n\t * \"Singleton\" implementation for modal instance\n\t *\n\t * @param el\n\t */\n\tget_instance: function ( el ) {\n\t\tif ( ! _instance ) {\n\t\t\t_instance = new TQB.EqualizeIntervals( {\n\t\t\t\tel: el\n\t\t\t} );\n\t\t}\n\n\t\treturn _instance;\n\t}\n} );\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/modals/equalize-intervals.js")},"import-interval.js":function(exports,module,require){eval("/**\n * Created by Ovidiu on 6/28/2017.\n */\nvar _instance = null,\n\t_utils = require( '../_utils' );\n\nmodule.exports = TVE.modal.base.extend( {\n\tafter_initialize: function () {\n\t\tthis.$el.addClass( 'medium' );\n\t},\n\tbefore_open: function () {\n\t\tvar html = '<option value=\"\" selected=\"selected\">Select an interval</option>';\n\n\t\t_.each( tqb_page_data.intervals, function ( value, key ) {\n\t\t\tif ( parseInt( value.id ) !== parseInt( this.child_id ) ) {\n\t\t\t\thtml += '<option value=\"' + value.id + '\">' + value.post_title + '</option>'\n\t\t\t}\n\t\t}, this );\n\n\t\tthis.$( '#tqb-import-from' ).html( html );\n\t},\n\n\t/**\n\t * Import content Ajax Action\n\t *\n\t * @param event\n\t * @param dom\n\t * @returns {boolean}\n\t */\n\timport_content: function ( event, dom ) {\n\t\tvar self = this,\n\t\t\timport_from = this.$( '#tqb-import-from' ).val();\n\n\t\tif ( ! _utils.is_integer_number( this.child_id ) || ! _utils.is_integer_number( import_from ) ) {\n\t\t\tTVE.page_message( 'Select an option', 2, 5000 );\n\t\t\treturn false;\n\t\t}\n\n\t\t_utils.state_ajax( {\n\t\t\tcustom: 'import',\n\t\t\timport_to: this.child_id,\n\t\t\timport_from: import_from\n\t\t} ).done( function ( html ) {\n\t\t\tTVE.inner_$( '.tqb-dynamic-content-container' ).html( html );\n\t\t\tself.close();\n\t\t} );\n\t}\n}, {\n\t/**\n\t * \"Singleton\" implementation for modal instance\n\t *\n\t * @param el\n\t */\n\tget_instance: function ( el ) {\n\t\tif ( ! _instance ) {\n\t\t\t_instance = new TQB.ImportInterval( {\n\t\t\t\tel: el\n\t\t\t} );\n\t\t}\n\n\t\treturn _instance;\n\t}\n} );\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/modals/import-interval.js")},"remove-interval.js":function(exports,module,require){
eval("/**\n * Created by Ovidiu on 6/28/2017.\n */\nvar _instance = null,\n\t_utils = require( '../_utils' );\n\nmodule.exports = TVE.modal.base.extend( {\n\tafter_initialize: function () {\n\t\tthis.$el.addClass( 'medium' );\n\t},\n\tremove_interval: function ( event, dom ) {\n\t\tvar self = this,\n\t\t\tchild_to_click = (this.child_next_id) ? this.child_next_id : this.child_prev_id;\n\n\t\tif ( ! _utils.is_integer_number( this.child_id ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t_utils.state_ajax( {\n\t\t\tcustom: 'remove',\n\t\t\tchild_id: this.child_id,\n\t\t\tchild_prev_id: this.child_prev_id,\n\t\t\tchild_next_id: this.child_next_id\n\t\t} ).done( function ( response ) {\n\t\t\t_utils.insertStateResponse( response );\n\t\t\tjQuery( '.tqb-tcb-intervals-item[data-id=\"' + child_to_click + '\"]' ).trigger( 'click' );\n\t\t\tself.close();\n\t\t} );\n\t}\n}, {\n\t/**\n\t * \"Singleton\" implementation for modal instance\n\t *\n\t * @param el\n\t */\n\tget_instance: function ( el, params ) {\n\t\tif ( ! _instance ) {\n\t\t\t_instance = new TQB.RemoveInterval( {\n\t\t\t\tel: el\n\t\t\t} );\n\t\t}\n\n\t\treturn _instance;\n\t}\n} );\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/modals/remove-interval.js")},"result-intervals.js":function(exports,module,require){eval("/**\n * Created by Ovidiu on 6/26/2017.\n */\n\nvar _instance = null,\n\t_utils = require( '../_utils' );\n\nmodule.exports = TVE.modal.base.extend( {\n\tafter_initialize: function () {\n\t\tthis.$el.addClass( 'medium' );\n\t},\n\tbefore_close: function () {\n\t\t// Remove Dynamic Content Element if it's not saved.\n\t\tif ( ! TVE.inner_$( '.tqb-dynamic-content-container' ).attr( 'tqb-saved' ) ) {\n\t\t\tTVE.inner_$( '#tqb-editor-replace' ).find( '.tqb-dynamic-content-container' ).remove();\n\t\t}\n\t},\n\t/**\n\t * Redirects to custom href\n\t *\n\t * @param $btn\n\t */\n\tredirect: function ( event, dom ) {\n\t\tif ( dom.getAttribute( 'data-href' ) ) {\n\t\t\ttop.location.href = dom.getAttribute( 'data-href' );\n\t\t}\n\t},\n\n\t/**\n\t * Copy dynamic content from previous page (result / opt-in)\n\t */\n\tcopy_states_from_prev_page: function () {\n\t\tvar self = this;\n\n\t\t_utils.state_ajax( {\n\t\t\tcustom: 'copy_similar_dynamic_content'\n\t\t} ).done( function ( response ) {\n\t\t\tTVE.inner_$( '.tqb-dynamic-content-container' ).removeClass( 'tcb-elem-placeholder' );\n\n\t\t\t_utils.insertStateResponse( response );\n\t\t\t_utils.show_hide_dynamic_content_element();\n\t\t\tTQB.States.click_first_state();\n\n\t\t\tself.close();\n\t\t} );\n\t},\n\n\tsave_states_number: function ( event, dom ) {\n\t\tvar self = this,\n\t\t\t_result_interval = this.$el.find( '#tqb_result_intervals' ).val(),\n\t\t\t_interval_max = parseInt( this.$el.find( '#tqb_result_intervals' ).attr( 'max' ) );\n\n\t\tif ( ! _utils.is_integer_number( _result_interval ) ) {\n\t\t\tTVE.page_message( 'The input must be an integer number', 2, 5000 );\n\t\t\treturn;\n\t\t}\n\n\t\tif ( _result_interval > _interval_max || _result_interval < 0 ) {\n\t\t\tTVE.page_message( 'The input must be between 0 and ' + _interval_max, 2, 5000 );\n\t\t\treturn;\n\t\t}\n\n\t\t_utils.state_ajax( {\n\t\t\tcustom: 'set_result_intervals',\n\t\t\tresult_interval: _result_interval\n\t\t} ).done( function ( response ) {\n\t\t\tTVE.inner_$( '.tqb-dynamic-content-container' ).removeClass( 'tcb-elem-placeholder' );\n\n\t\t\t_utils.insertStateResponse( response );\n\t\t\t_utils.show_hide_dynamic_content_element();\n\n\t\t\tTQB.States.click_first_state();\n\n\t\t\tself.close();\n\t\t} );\n\t},\n\tpreview_states: function ( event, dom ) {\n\t\tvar _value = dom.value,\n\t\t\t_html = '',\n\t\t\t$interval_prev = this.$el.find( '#tqb-intervals-preview' ),\n\t\t\t_interval_max = parseInt( this.$el.find( '#tqb_result_intervals' ).attr( 'max' ) );\n\n\t\tif ( ! _utils.is_integer_number( _value ) ) {\n\t\t\tTVE.page_message( 'The input must be an integer number', 2, 5000 );\n\t\t\t$interval_prev.html( '' );\n\t\t\treturn;\n\t\t}\n\n\t\tif ( _value > _interval_max || _value < 1 ) {\n\t\t\tTVE.page_message( 'The input must be between 1 and ' + _interval_max, 2, 5000 );\n\t\t\t$interval_prev.html( '' );\n\t\t\treturn;\n\t\t}\n\n\t\t_html += '<div class=\"tqb-tcb-intervals-preview-row\">';\n\t\tfor ( var i = 0; i < _value; i ++ ) {\n\t\t\t_html += '<div class=\"tqb-tcb-intervals-preview-column\"></div>'\n\t\t}\n\t\t_html += '</div>';\n\t\t_html += '<div class=\"tqb-tcb-number-preview\"><div class=\"tcb-left\">' + tqb_page_data.quiz_config.absolute_min_value + '</div><div class=\"tcb-right\">' + tqb_page_data.quiz_config.absolute_max_value + '</div></div>'\n\t\t$interval_prev.html( _html );\n\t}\n\n}, {\n\t/**\n\t * \"Singleton\" implementation for modal instance\n\t *\n\t * @param el\n\t */\n\tget_instance: function ( el ) {\n\t\tif ( ! _instance ) {\n\t\t\t_instance = new TQB.ResultIntervals( {\n\t\t\t\tel: el\n\t\t\t} );\n\t\t}\n\n\t\treturn _instance;\n\t}\n} );\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/modals/result-intervals.js")},"save-validation.js":function(exports,module,require){eval("var _instance = null,\n\t_utils = require( '../_utils' );\n\nmodule.exports = TVE.modal.base.extend( {\n\tafter_initialize: function () {\n\t\tthis.$el.addClass( 'medium' );\n\t}\n}, {\n\t/**\n\t * \"Singleton\" implementation for modal instance\n\t *\n\t * @param el\n\t */\n\tget_instance: function ( el ) {\n\t\tif ( ! _instance ) {\n\t\t\t_instance = new TQB.SaveValidation( {\n\t\t\t\tel: el\n\t\t\t} );\n\t\t}\n\n\t\treturn _instance;\n\t}\n} );\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/modals/save-validation.js")},"social-share-badge-templates.js":function(exports,module,require){eval("/**\n * Created by Ovidiu on 6/30/2017.\n */\nvar _instance = null,\n\t_utils = require( '../_utils' );\n\nmodule.exports = TVE.modal.base.extend( {\n\tafter_initialize: function () {\n\t\tthis.$el.addClass( 'medium' );\n\t},\n\tbefore_close: function () {\n\t\tTVE.inner_$( '#tqb-editor-replace' ).find( '.tqb-social-share-badge-container.tcb-elem-placeholder' ).remove();\n\t},\n\tselect_template: function ( event ) {\n\t\tthis.$( '.template-wrapper.active' ).removeClass( 'active' );\n\t\tevent.currentTarget.classList.toggle( 'active' );\n\t},\n\tchoose_template: function () {\n\t\tvar $template = this.$( '.tve-template-item .active' ),\n\t\t\tself = this;\n\t\tif ( $template && $template.length ) {\n\n\t\t\t_utils.state_ajax( {\n\t\t\t\tcustom: 'get_social_share_badge_template',\n\t\t\t\ttemplate: $template.data( 'key' )\n\t\t\t} ).done( function ( response ) {\n\t\t\t\tconst $socialShareBadgeContainer = TVE.inner_$( '.tqb-social-share-badge-container' );\n\n\t\t\t\t$socialShareBadgeContainer.removeClass( 'tcb-elem-placeholder' ).html( response );\n\t\t\t\t_utils.show_hide_social_share_badge_element();\n\n\t\t\t\t/* Migrate any possible old-style (font) icons from the template to the svg version */\n\t\t\t\tTVE.inner.window.TCB_Front.icons.migrate( $socialShareBadgeContainer );\n\t\t\t\tself.close();\n\t\t\t\tTVE.Components.tqb_social_share_badge.controls.preview.update();\n\t\t\t} );\n\t\t} else {\n\t\t\tTVE.page_message( tqb_page_data.L.alert_choose_tpl, true );\n\t\t}\n\t}\n}, {\n\t/**\n\t * \"Singleton\" implementation for modal instance\n\t *\n\t * @param el\n\t */\n\tget_instance: function ( el ) {\n\t\tif ( ! _instance ) {\n\t\t\t_instance = new TQB.SocialShareBadgeTemplates( {\n\t\t\t\tel: el\n\t\t\t} );\n\t\t}\n\n\t\treturn _instance;\n\t}\n} );\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/modals/social-share-badge-templates.js")},"variation-reset.js":function(exports,module,require){eval("/**\n * Created by Ovidiu on 6/29/2017.\n */\nvar _instance = null,\n\t_utils = require( '../_utils' );\n\nmodule.exports = TVE.modal.base.extend( {\n\tafter_initialize: function () {\n\t\tthis.$el.addClass( 'medium' );\n\t},\n\treset: function () {\n\t\tvar self = this;\n\t\t_utils.tpl_ajax( {\n\t\t\tcustom: 'reset'\n\t\t} ).done( function ( response ) {\n\t\t\t_utils.insertResponse( response );\n\t\t\tself.close();\n\t\t\tTVE.main.overlay( 'close' );\n\t\t} );\n\t}\n}, {\n\t/**\n\t * \"Singleton\" implementation for modal instance\n\t *\n\t * @param el\n\t */\n\tget_instance: function ( el ) {\n\t\tif ( ! _instance ) {\n\t\t\t_instance = new TQB.VariationReset( {\n\t\t\t\tel: el\n\t\t\t} );\n\t\t}\n\n\t\treturn _instance;\n\t}\n} );\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/modals/variation-reset.js")},"variation-save.js":function(exports,module,require){eval("/**\n * Created by Ovidiu on 6/29/2017.\n */\nvar _instance = null,\n\t_utils = require( '../_utils' );\n\nmodule.exports = TVE.modal.base.extend( {\n\tafter_initialize: function () {\n\t\tthis.$el.addClass( 'medium' );\n\t},\n\tsave: function () {\n\t\tvar _name = this.$( 'input#tve-template-name' ).val(),\n\t\t\tself = this;\n\n\t\tif ( _name && _name.length > 0 ) {\n\t\t\t_utils.tpl_ajax( {\n\t\t\t\tcustom: 'save',\n\t\t\t\tname: _name\n\t\t\t} ).done( function ( response ) {\n\t\t\t\tself.close();\n\t\t\t\tTVE.main.overlay( 'close' );\n\t\t\t} );\n\t\t} else {\n\t\t\tTVE.page_message( tqb_page_data.L.tpl_name_required, true, 5000 );\n\t\t}\n\t}\n}, {\n\t/**\n\t * \"Singleton\" implementation for modal instance\n\t *\n\t * @param el\n\t */\n\tget_instance: function ( el ) {\n\t\tif ( ! _instance ) {\n\t\t\t_instance = new TQB.VariationSave( {\n\t\t\t\tel: el\n\t\t\t} );\n\t\t}\n\n\t\treturn _instance;\n\t}\n} );\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/modals/variation-save.js")},"variation-templates.js":function(exports,module,require){eval("/**\n * Created by Ovidiu on 6/29/2017.\n */\nvar _instance = null,\n\t_utils = require( '../_utils' );\n\n\nmodule.exports = TVE.modal.base.extend( {\n\tsaved_tpl_delete_confirmation: TVE.tpl( 'landing-pages/delete-confirmation' ),\n\tinitialize: function () {\n\t\tthis.initClickHandler();\n\n\t\tthis.$warning = this.$( '.warning-ct-change' );\n\t\tthis.$footer = this.$( '.tcb-modal-footer' );\n\n\t\tthis.$defaultTemplatesWrapper = this.$( '.tqb-default-templates' );\n\t\tthis.$savedTemplatesWrapper = this.$( '.tqb-saved-templates' );\n\n\t\tthis.$defaultTemplates = this.$defaultTemplatesWrapper[ 0 ].innerHTML;\n\t},\n\n\tbefore_open: function () {\n\t\t/* Add the standard styling class*/\n\t\tthis.$el.addClass( 'modal-w-sidebar' );\n\n\t\t/* Reset all variables */\n\t\tthis.$warning.css( 'display', 'none' );\n\t\tthis.$footer.css( 'display', 'none' );\n\t\tthis.$( '.tqb-category-filter.active' ).removeClass( 'active' );\n\t\tthis.$( \".tqb-category-filter[data-content='default']\" ).addClass( 'active' );\n\t\tthis.$( '.tve-c-modal-search-input' ).val( '' );\n\n\t\t/* Always render the default templates first */\n\t\tthis.templatesType = 'default';\n\t\tthis.renderTemplates();\n\t},\n\n\t/**\n\t * Triggers when a filter from the sidebar is clicked\n\t * @param event\n\t */\n\tfilterClick: function ( event ) {\n\t\tthis.$( '.tqb-category-filter.active' ).removeClass( 'active' );\n\t\tevent.currentTarget.classList.toggle( 'active' );\n\n\t\tthis.templatesType = event.currentTarget.getAttribute( 'data-content' );\n\t\tthis.renderTemplates();\n\t},\n\n\t/**\n\t * Triggers when the searchbar is used\n\t */\n\tonSearch: function () {\n\t\t_.throttle( this.renderTemplates(), 420 );\n\t},\n\n\t/**\n\t * Render the selected type of templates\n\t */\n\trenderTemplates: function () {\n\t\tvar self = this;\n\t\tthis.$savedTemplatesWrapper.css( 'display', 'none' );\n\t\tthis.$defaultTemplatesWrapper.css( 'display', 'none' );\n\n\t\tif ( this.templatesType === 'default' ) {\n\t\t\tthis.renderDefaultTemplates().then( function () {\n\t\t\t\tself.applyMasonry();\n\t\t\t} );\n\t\t} else {\n\t\t\tthis.renderSavedTemplates();\n\t\t}\n\t},\n\n\t/**\n\t * Renders the default templates\n\t * @returns {Promise<unknown>}\n\t */\n\trenderDefaultTemplates: function () {\n\t\tlet self = this;\n\n\t\treturn new Promise( function ( resolve ) {\n\t\t\tself.$defaultTemplatesWrapper.empty();\n\n\t\t\tself.$templateItemsWrapper = self.$defaultTemplatesWrapper;\n\n\t\t\tlet response = self.filterTemplates( self.$defaultTemplates );\n\t\t\tif ( response.length ) {\n\t\t\t\tresponse.filter( function ( item, key ) {\n\t\t\t\t\tself.$defaultTemplatesWrapper.append( key );\n\t\t\t\t} )\n\t\t\t} else {\n\t\t\t\tself.$defaultTemplatesWrapper.append( 'No templates found' );\n\t\t\t}\n\n\t\t\tself.$defaultTemplatesWrapper.css( 'display', 'block' );\n\t\t\tresolve( response );\n\t\t} );\n\n\t},\n\n\t/**\n\t * Fetches and renders the saved templates\n\t */\n\trenderSavedTemplates: function () {\n\t\tvar self = this;\n\t\tthis.$templateItemsWrapper = this.$savedTemplatesWrapper;\n\n\t\tthis.$savedTemplatesWrapper.html( tqb_page_data.L.fetching_saved_templates );\n\n\t\t_utils.tpl_ajax( {\n\t\t\tcustom: 'get_saved',\n\t\t\tquiz_type: tqb_page_data.quiz_type\n\t\t}, {\n\t\t\tdataType: 'html'\n\t\t}, true ).done( function ( response ) {\n\t\t\tTVE.main.overlay( 'close' );\n\t\t\tself.$savedTemplatesWrapper.empty();\n\n\t\t\tresponse = self.filterTemplates( response );\n\t\t\tif ( response.length ) {\n\t\t\t\tresponse.filter( function ( item, key ) {\n\t\t\t\t\tself.$savedTemplatesWrapper.append( key );\n\t\t\t\t} )\n\t\t\t} else {\n\t\t\t\tself.$savedTemplatesWrapper.append( 'No templates found' );\n\t\t\t}\n\t\t\tself.applyMasonry();\n\t\t} );\n\t\tself.$savedTemplatesWrapper.css( 'display', 'block' );\n\t},\n\n\t/**\n\t * Clear the searchbar\n\t */\n\tclearSearch: function () {\n\t\tthis.$( '.tve-c-modal-search-input' ).val( '' );\n\t\tthis.renderTemplates();\n\t},\n\n\t/**\n\t * Filter templates by searchbar input\n\t * @param templates\n\t * @returns {*|define.amd.jQuery}\n\t */\n\tfilterTemplates: function ( templates ) {\n\t\tconst searchFilter = this.$( '.tve-c-modal-search-input' ).val().trim().toLowerCase();\n\t\treturn jQuery( templates ).filter( function ( item, key ) {\n\t\t\tvar templateName = jQuery( key ).find( '.cb-template-name' )[ 0 ];\n\t\t\tif ( templateName ) {\n\t\t\t\tvar allow = true;\n\t\t\t\tif ( allow && searchFilter && ! templateName.innerText.toLowerCase().includes( searchFilter ) ) {\n\t\t\t\t\tallow = false;\n\t\t\t\t}\n\t\t\t\treturn allow;\n\t\t\t}\n\t\t} );\n\t},\n\n\t/**\n\t * Triggers when a template is selected\n\t * @param event\n\t */\n\tselectTemplate: function ( event ) {\n\t\tvar $currentTemplate = jQuery( event.currentTarget );\n\t\tthis.$el.find( '.cloud-template-item.active' ).removeClass( 'active' );\n\n\t\t$currentTemplate.addClass( 'active' );\n\t\tthis.$warning.css( 'display', 'block' );\n\t\tthis.$footer.css( 'display', 'block' );\n\t},\n\n\t/**\n\t * Open the options tooltip\n\t * @param event\n\t */\n\topenOptionsTooltip: function ( event ) {\n\t\tthis.closeOptionsTooltip();\n\t\tjQuery( event.target ).closest( '.modal-title-w-options' ).toggleClass( 'tooltip-open' );\n\t\tthis.tooltipOpen = true;\n\t},\n\n\t/**\n\t * Close the current options tooltip\n\t */\n\tcloseOptionsTooltip: function () {\n\t\tif ( this.tooltipOpen ) {\n\t\t\tthis.$el.find( '.tooltip-open' ).removeClass( 'tooltip-open' );\n\t\t\tthis.tooltipOpen = false;\n\t\t}\n\t},\n\n\t/**\n\t * Close the options tooltip when clicking anywhere else\n\t */\n\tinitClickHandler: function () {\n\t\tvar self = this;\n\t\tthis.$el.on( 'mousedown', function ( event ) {\n\t\t\t\tconst $target = jQuery( event.target );\n\t\t\t\tif ( self.tooltipOpen && $target.closest( '.modal-title-w-options, .tcb-dropdown-dots' ).length === 0 ) {\n\t\t\t\t\tself.closeOptionsTooltip();\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t},\n\n\t/**\n\t * Apply masonry on the current template list\n\t */\n\tapplyMasonry: function () {\n\t\tif ( this.$templateItemsWrapper.data( 'masonry' ) ) {\n\t\t\tthis.$templateItemsWrapper.data( 'masonry' ).destroy()\n\t\t}\n\t\tthis.$templateItemsWrapper.masonry();\n\t},\n\n\t/**\n\t * Display the delete confirmation\n\t *\n\t * @param event\n\t */\n\tdeleteConfirmation: function ( event ) {\n\t\tvar $templateItem = jQuery( event.currentTarget ).closest( '.cloud-template-item' );\n\n\t\t$templateItem.find( '.cb-template-wrapper' ).hide();\n\t\tvar $deleteNotice = $templateItem.find( '.symbol-delete-notice' );\n\n\t\t$deleteNotice.css( 'display', 'flex' );\n\t\tthis.closeOptionsTooltip();\n\t},\n\n\t/**\n\t * Cancel a delete action and return to the default state\n\t * @param event\n\t */\n\thideDelete: function ( event ) {\n\t\tvar $templateItem = jQuery( event.currentTarget ).closest( '.cloud-item' );\n\t\t$templateItem.find( '.cb-template-wrapper' ).show();\n\t\t$templateItem.find( '.symbol-delete-notice' ).css( 'display', 'none' );\n\t},\n\n\t/**\n\t * Delete a saved template\n\t * @param event\n\t */\n\tdeleteSavedTemplate: function ( event ) {\n\t\tvar self = this;\n\t\tvar $templateItem = jQuery( event.currentTarget ).closest( '.cloud-template-item' );\n\n\t\tTVE.main.overlay();\n\t\t_utils.tpl_ajax( {\n\t\t\tcustom: 'delete'\n\t\t}, {\n\t\t\tdataType: 'html',\n\t\t\ttpl: $templateItem.attr( 'data-id' )\n\t\t}, true ).done( function () {\n\t\t\t$templateItem.remove();\n\t\t\tself.renderTemplates();\n\t\t\tTVE.main.overlay( 'close' );\n\t\t} );\n\n\t},\n\n\t/**\n\t * Apply the selected template\n\t */\n\tapplyTemplate: function () {\n\t\tvar $template = this.$( '.cloud-template-item.active' ),\n\t\t\tself = this;\n\t\tif ( $template && $template.length ) {\n\n\t\t\t_utils.tpl_ajax( {\n\t\t\t\tcustom: 'choose',\n\t\t\t\ttpl: $template.data( 'key' )\n\t\t\t} ).done( function ( response ) {\n\t\t\t\t_utils.insertResponse( response );\n\n\t\t\t\tTVE.main.overlay( 'close' );\n\t\t\t\tself.close();\n\t\t\t} );\n\n\t\t} else {\n\t\t\tTVE.page_message( TVE.t.SelectTemplate, true, 5000 );\n\t\t}\n\t},\n}, {\n\t/**\n\t * \"Singleton\" implementation for modal instance\n\t * @param el\n\t */\n\tget_instance: function ( el ) {\n\t\tif ( ! _instance ) {\n\t\t\t_instance = new TQB.VariationTemplates( {\n\t\t\t\tel: el\n\t\t\t} );\n\t\t}\n\n\t\treturn _instance;\n\t}\n} );\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/modals/variation-templates.js")}},"social-share-badge-component.js":function(exports,module,require){eval("/**\n * Created by Ovidiu on 6/30/2017.\n */\n\nvar collection = new Backbone.Collection();\nfunction get_renderer() {\n\treturn TVE.renderers.CONSTRUCTORS.social.extend( {\n\t\trender_to: function ( $element, add_undo_step ) {\n\t\t\tTVE.renderers.CONSTRUCTORS.social.prototype.render_to.call( this, $element.find( '.tve_social_items' ), add_undo_step )\n\t\t},\n\t\t/**\n\t\t * Private render method. Should not be called directly\n\t\t * Renders the contents of the element\n\t\t *\n\t\t * @param {jQuery} $element\n\t\t * @param {Boolean} [add_undo_step] whether or not to record an undo step\n\t\t * @returns {*}\n\t\t */\n\t\t_render_to: function ( $element, add_undo_step ) {\n\t\t\tvar counts = {};\n\t\t\t$element.find( '.tve_s_count' ).each( function () {\n\t\t\t\tvar $this = jQuery( this );\n\t\t\t\tcounts[ $this.closest( '.tve_s_item' ).attr( 'data-s' ) ] = $this.text();\n\t\t\t} );\n\t\t\tcounts.total = {\n\t\t\t\tvalue: 0,\n\t\t\t\tformatted: 0\n\t\t\t};\n\t\t\tif ( TVE.inner.window.TCB_Front.total_share_counts && TVE.inner.window.TCB_Front.total_share_counts[ this.config.share_url ] ) {\n\t\t\t\tcounts.total = TVE.inner.window.TCB_Front.total_share_counts[ this.config.share_url ];\n\t\t\t}\n\n\t\t\tconst selected = this.config.selected.filter( net => net.checked ).map( net => net.key ? net.key : net );\n\n\t\t\tvar $social_elements_html = jQuery( TVE.tpl( 'elements/social' )( {r: this, config: this.config, counts: counts, selected: selected} ) ),\n\t\t\t\tconfig = this.config;\n\t\t\t$social_elements_html.find( '.tve_s_item' ).each( function () {\n\t\t\t\tvar k = this.getAttribute( 'data-s' ),\n\t\t\t\t\telem = this;\n\t\t\t\t_.each( config[ k ], function ( value, field ) {\n\t\t\t\t\tif ( value && field !== 'href' ) { // href defined globally\n\t\t\t\t\t\telem.setAttribute( 'data-' + field, value );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} );\n\t\t\t$social_elements_html.attr( 'data-counts', this.config.show_count ? '1' : '' );\n\t\t\t$social_elements_html.attr( 'data-min_shares', this.config.min_shares );\n\n\t\t\t$element.replaceWith( $social_elements_html );\n\t\t}\n\t} );\n}\n\nmodule.exports = TVE.Views.Components.Social.extend( {\n\tcontrols_init: function () {\n\t\tthis.renderer = new ( get_renderer() )( 'tqb_social_share_badge' );\n\t\tthis.renderer.setup_defaults();\n\n\t\tTVE.Views.Components.Social.prototype.controls_init.call( this );\n\t},\n\t/**\n\t * Override the open the settings panel for a network\n\t *\n\t * @param model\n\t * @param dom\n\t */\n\topen_edit_panel: function ( model, dom ) {\n\t\tvar $items = TVE.ActiveElement.find( '.tve_s_item' );\n\n\t\t/* Update the share labels when exiting edit mode */\n\t\t$items.each( function ( index, network ) {\n\t\t\tvar $network = TVE.inner_$( network ),\n\t\t\t\tshareBtnLabel = $network.find( '.tve_s_text' ).text();\n\n\t\t\t$network.attr( 'data-label', shareBtnLabel );\n\t\t} );\n\n\t\treturn TVE.Views.Components.Social.prototype.open_edit_panel.apply( this, arguments );\n\t},\n\tget_collection: function () {\n\t\treturn collection;\n\t},\n\tchange_template: function () {\n\t\tthis.placeholder_action();\n\t},\n\tplaceholder_action: function () {\n\t\tvar socialShareBadgeTemplateModal = TQB.SocialShareBadgeTemplates.get_instance( TVE.modal.get_element( 'social-share-badge-template' ) );\n\t\tsocialShareBadgeTemplateModal.open( {\n\t\t\ttop: '20%',\n\t\t\tdismissible: false\n\t\t} );\n\t}\n} );\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/social-share-badge-component.js")},"states.js":function(exports,module,require){
eval("/**\n * Created by Ovidiu on 6/27/2017.\n */\nvar _util = require( './_utils' );\n\nmodule.exports = TVE.Views.Base.component.extend( {\n\tinitialize: function ( args ) {\n\t\t_util.popover();\n\t\t_util.hover_numeric_range_preview();\n\n\t\tTVE.add_filter( 'validate_saved_content', function () {\n\t\t\tvar $dynamic_content = TVE.inner_$( '.tqb-dynamic-content-container' );\n\t\t\t//Send the css to the dynamic content also when clicking on save button\n\t\t\tif ( $dynamic_content.length ) {\n\t\t\t\tvar $dynamic_content_clone = $dynamic_content.clone();\n\n\t\t\t\t$dynamic_content_clone.wrap( '<div></div>' );\n\t\t\t\t$dynamic_content_clone = $dynamic_content_clone.parent();\n\n\t\t\t\tTVE.CONST.custom_post_data.tqb_child_variation_css = JSON.stringify( $dynamic_content_clone.collect_head_css() );\n\t\t\t}\n\t\t\treturn true;\n\t\t} );\n\t},\n\tequalize: function () {\n\t\tvar equalizeModal = TQB.EqualizeIntervals.get_instance( TVE.modal.get_element( 'equalize-intervals' ) );\n\t\tequalizeModal.open( {\n\t\t\ttop: '20%'\n\t\t} );\n\t},\n\treset: function () {\n\t\tvar resetModal = TQB.ResultIntervals.get_instance( TVE.modal.get_element( 'result-intervals' ) );\n\t\tresetModal.open( {\n\t\t\ttop: '20%'\n\t\t} );\n\t},\n\t/**\n\t * Generate ABC child variations\n\t */\n\tgenerate_personality_states: function () {\n\t\tvar self = this;\n\n\t\t_util.state_ajax( {\n\t\t\tcustom: 'generate_personality_child_variations'\n\t\t} ).done( function ( response ) {\n\t\t\tTVE.inner_$( '.tqb-dynamic-content-container' ).removeClass( 'tcb-elem-placeholder' );\n\n\t\t\t_util.insertStateResponse( response );\n\t\t\t_util.show_hide_dynamic_content_element();\n\t\t\t/* Click the first state item */\n\t\t\tself.click_first_state();\n\t\t} );\n\t},\n\t/**\n\t * Update interval limits\n\t */\n\tupdate_intervals: function () {\n\t\tvar self = this,\n\t\t\tmin = this.$( '#tqb-range-min' ).val(),\n\t\t\tmax = this.$( '#tqb-range-max' ).val(),\n\t\t\tprev_min = parseInt( this.$( '#tqb-prev-min' ).val() ),\n\t\t\tnext_max = parseInt( this.$( '#tqb-next-max' ).val() ),\n\t\t\tchild_id = this.$( '#tqb-child-id' ).val(),\n\t\t\tchild_prev_id = this.$( '#tqb-child-prev-id' ).val(),\n\t\t\tchild_next_id = this.$( '#tqb-child-next-id' ).val();\n\n\t\t/*\n\t\t The input must be an integer number\n\t\t */\n\t\tif ( ! _util.is_integer_number( max ) || ! _util.is_integer_number( min ) ) {\n\t\t\tTVE.page_message( 'The input must be an integer number', 2, 5000 );\n\t\t\treturn;\n\t\t}\n\n\t\t/*\n\t\t Check for limits of the intervals change:\n\t\t */\n\t\tif ( ! _util.is_integer_number( prev_min ) && min != tqb_page_data.quiz_config.absolute_min_value ) {\n\t\t\tTVE.page_message( tqb_page_data.L.intervals_min_val_cannot_be_changed, 2, 5000 );\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! _util.is_integer_number( next_max ) && max != tqb_page_data.quiz_config.absolute_max_value ) {\n\t\t\tTVE.page_message( tqb_page_data.L.intervals_max_val_cannot_be_changed, 2, 5000 );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t END Check for limits of the intervals change:\n\t\t */\n\n\t\t/*\n\t\t Check for the minimum requirements\n\t\t */\n\t\tif ( min < ( prev_min + 1 ) ) {\n\t\t\tTVE.page_message( tqb_page_data.L.min_value_limit + ( prev_min + 1 ), 2, 5000 );\n\t\t\treturn;\n\t\t}\n\n\t\tif ( max > ( next_max - 1 ) ) {\n\t\t\tTVE.page_message( tqb_page_data.L.max_value_limit + ( next_max - 1 ), 2, 5000 );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t END Check for the minimum requirements\n\t\t */\n\n\t\t/*\n\t\t * Additional Checks\n\t\t */\n\t\tif ( parseInt( max ) < parseInt( min ) ) {\n\t\t\tTVE.page_message( 'ERROR: Max value can not be greater than min value', 2 );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t * END Additional Checks\n\t\t */\n\n\t\tif ( child_id ) {\n\t\t\t_util.state_ajax( {\n\t\t\t\tcustom: 'update',\n\t\t\t\tmin: min,\n\t\t\t\tmax: max,\n\t\t\t\tchild_id: child_id,\n\t\t\t\tchild_prev_id: child_prev_id,\n\t\t\t\tchild_next_id: child_next_id,\n\t\t\t\tquiz_min: tqb_page_data.quiz_config.absolute_min_value,\n\t\t\t\tquiz_max: tqb_page_data.quiz_config.absolute_max_value\n\t\t\t} ).done( function ( response ) {\n\t\t\t\t_util.insertStateResponse( response );\n\t\t\t\tself.$( '.tqb-tcb-intervals-item[data-id=\"' + child_id + '\"]' ).trigger( 'click' );\n\t\t\t} );\n\t\t} else {\n\t\t\tTVE.page_message( 'Something is wrong! Please contact Thrive Support!' );\n\t\t}\n\t},\n\t/**\n\t * Split a state into 2 equal states\n\t *\n\t * @returns {boolean}\n\t */\n\tstate_split: function () {\n\t\tvar child_id = this.$( '#tqb-child-id' ).val(),\n\t\t\tself = this;\n\n\t\tif ( ! _util.is_integer_number( child_id ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t_util.state_ajax( {\n\t\t\tcustom: 'split',\n\t\t\tchild_id: child_id\n\t\t} ).done( function ( response ) {\n\t\t\t_util.insertStateResponse( response );\n\t\t\tself.$( '.tqb-tcb-intervals-item[data-id=\"' + child_id + '\"]' ).trigger( 'click' );\n\t\t} );\n\t},\n\n\timport_content: function () {\n\t\tvar importModal = TQB.ImportInterval.get_instance( TVE.modal.get_element( 'import-content' ) );\n\t\timportModal.child_id = this.$( '#tqb-child-id' ).val();\n\t\timportModal.open( {\n\t\t\ttop: '20%'\n\t\t} );\n\t},\n\n\tremove_state: function () {\n\t\tvar removeIntervalModal = TQB.RemoveInterval.get_instance( TVE.modal.get_element( 'remove-interval' ) );\n\n\t\tremoveIntervalModal.child_id = this.$( '#tqb-child-id' ).val();\n\t\tremoveIntervalModal.child_prev_id = this.$( '#tqb-child-prev-id' ).val();\n\t\tremoveIntervalModal.child_next_id = this.$( '#tqb-child-next-id' ).val();\n\n\t\tremoveIntervalModal.open( {\n\t\t\ttop: '20%'\n\t\t} );\n\t},\n\n\tstate_click: function ( event, dom ) {\n\t\tif ( this.disable_state_save ) {\n\t\t\treturn false;\n\t\t}\n\t\tif ( ! TVE.CONST.custom_post_data ) {\n\t\t\tTVE.CONST.custom_post_data = {};\n\t\t}\n\t\tTVE.CONST.custom_post_data.tqb_child_variation_id = this.$( '.tqb-tcb-intervals-item-active' ).attr( 'data-id' );\n\t\tvar $interval_item = this.$( '.tqb-tcb-intervals-item' ),\n\t\t\t$dynamic_content = TVE.inner_$( '.tqb-dynamic-content-container' ),\n\t\t\t$dynamic_content_clone = $dynamic_content.clone(),\n\t\t\tself = this;\n\n\t\t$dynamic_content_clone.wrap( '<div></div>' );\n\t\t$dynamic_content_clone = $dynamic_content_clone.parent();\n\n\t\tTVE.CONST.custom_post_data.tqb_child_variation_css = JSON.stringify( $dynamic_content_clone.collect_head_css() );\n\n\t\t//Remove the active interval class\n\t\t$interval_item.removeClass( 'tqb-tcb-intervals-item-active' );\n\t\t//Add the active interval class on the clicked element\n\t\tdom.classList.add( 'tqb-tcb-intervals-item-active' );\n\n\t\t$dynamic_content.addClass( 'tcb-el-loading' );\n\t\tthis.disable_state_save = true;\n\t\tTVE.main.overlay();\n\t\tTVE.add_filter( 'tcb_save_post_data_before', this._on_state_save );\n\t\tTVE.Editor_Page.save( 'true', function () {\n\t\t\t_util.state_ajax( {\n\t\t\t\tcustom: 'get_child_variation',\n\t\t\t\tchild_variation: dom.getAttribute( 'data-id' )\n\t\t\t} ).done( function ( response ) {\n\t\t\t\tif ( response ) {\n\t\t\t\t\tTVE.CONST.custom_post_data.tqb_child_variation_id = response.id;\n\n\t\t\t\t\tTVE.inner_$( '.tve_custom_style,.tve_user_custom_style' ).remove();\n\t\t\t\t\tTVE.CSS_Rule_Cache.clear();\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Clear also the Global Rules\n\t\t\t\t\t */\n\t\t\t\t\tTVE.USE_GLOBALSHEET = true;\n\t\t\t\t\tTVE.CSS_Rule_Cache.clear();\n\t\t\t\t\tTVE.USE_GLOBALSHEET = false;\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Refresh the style node\n\t\t\t\t\t */\n\t\t\t\t\tTVE.Editor_Page.content_manager.refresh_global_style_node();\n\n\t\t\t\t\tTVE.inner_$( 'head' ).append( response.parent_variation_custom_css );\n\n\t\t\t\t\tTVE.Editor_Page.initEditorActions();\n\n\t\t\t\t\tif ( ! response.custom_css ) {\n\t\t\t\t\t\tresponse.custom_css = {};\n\t\t\t\t\t}\n\t\t\t\t\tvar $new_html = TVE.Editor_Page.content_manager.process_saved_template( '', jQuery( response.content ), response.custom_css, '', true );\n\n\t\t\t\t\tTVE.drag.insert( $new_html, $dynamic_content, true, false );\n\n\t\t\t\t\tTVE.Editor_Page.editor.find( '.tcb-responsive-video' ).each( function () {\n\t\t\t\t\t\tvar $this = TVE.$( this );\n\n\t\t\t\t\t\tif ( ! $this.attr( 'src' ) ) {\n\t\t\t\t\t\t\t$this.attr( 'src', $this.attr( 'data-src' ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t} )\n\n\t\t\t\t\t//We need this for old pages (that contain dynamic content) that were made in Thrive Content Builder\n\t\t\t\t\t//Because dynamic content is fetched via ajax, sometimes the rules do not come in the correct order Mobile -> Tablet -> Desktop\n\t\t\t\t\tTVE.CSS_Rule_Cache.reorderMediaRules();\n\n\t\t\t\t\t//Switch Menu To Elements After State Is Selected\n\t\t\t\t\tTVE.main.switch_menu_to( 'elements' );\n\t\t\t\t}\n\t\t\t\t$dynamic_content.removeClass( 'tcb-el-loading' );\n\t\t\t\tself.disable_state_save = false;\n\t\t\t} ).always( function () {\n\t\t\t\tTVE.main.overlay( true );\n\t\t\t} );\n\n\t\t} );\n\t\tTVE.remove_filter( 'tcb_save_post_data_before', this._on_state_save );\n\t},\n\t_on_state_save: function ( data ) {\n\n\t\tvar fonts = TVE.FontManager.get_imported_fonts();\n\t\tvar inlineRules = data.inline_rules;\n\n\t\t_.each( Object.keys( fonts ), function ( font ) {\n\n\t\t\tvar url = TVE.FontManager.generate_link( fonts[ font ] );\n\n\t\t\tif ( url.length ) {\n\t\t\t\tif ( ! url.includes( '@import' ) ) {\n\t\t\t\t\turl = '@import url(\"' + url + '\")';\n\t\t\t\t}\n\n\t\t\t\tif ( ! inlineRules.includes( url ) ) {\n\t\t\t\t\tinlineRules = url + ';' + inlineRules;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\tdata.inline_rules = inlineRules;\n\n\t\treturn data;\n\t},\n\tclick_first_state: function () {\n\t\tvar $intervals_items = this.$( '.tqb-tcb-intervals-item' );\n\t\tif ( $intervals_items.length ) {\n\t\t\t$intervals_items.first().trigger( 'click' );\n\t\t}\n\t},\n\tdelete_states: function () {\n\t\tvar deleteStatesModal = TQB.DeleteDynamicContent.get_instance( TVE.modal.get_element( 'delete-dynamic-content' ) );\n\t\tdeleteStatesModal.open( {\n\t\t\ttop: '20%'\n\t\t} );\n\t},\n\t/**\n\t * Delete all states\n\t */\n\tdelete_all_states: function () {\n\t\t_util.state_ajax( {\n\t\t\tcustom: 'delete_dynamic_content'\n\t\t} ).done( function ( response ) {\n\t\t\tTVE.inner_$( '.tqb-dynamic-content-container' ).remove();\n\t\t\tjQuery( '#tqb-form-states' ).html( '' );\n\n\t\t\t//The child variations (dynamic content) has been deleted. Therefore there is no active state with dynamic content\n\t\t\tTVE.CONST.custom_post_data.tqb_child_variation_id = null;\n\t\t\t_util.show_hide_dynamic_content_element();\n\t\t\tTVE.Editor_Page.save( 'true' );\n\t\t} );\n\t}\n}, {} );\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/states.js")}}}}}}})("workspace/tcb-bridge/assets/js/internal/main");