/*! Thrive Quiz Builder - 2022-01-25
* http://www.thrivethemes.com/
* Copyright (c) 2022 Thrive Themes */
!function(a){"use strict";var b,c,d,e,f,g={".js":[],".json":[],".css":[],".html":[]},h="function"==typeof require?require:null;return e=function(a){var b=new Error("Could not find module '"+a+"'");return b.code="MODULE_NOT_FOUND",b},f=function(a,b,c){var d,e;if("function"==typeof a[b+c])return b+c;for(d=0;e=g[c][d];++d)if("function"==typeof a[b+e])return b+e;return null},b=function(a,d,g,h,i,j){var k,l,m,n,o,p;for(g=g.split("/"),k=g.pop(),"."!==k&&".."!==k||(g.push(k),k="");null!=(l=g.shift());)if(l&&"."!==l&&(".."===l?(a=d.pop(),j=j.slice(0,j.lastIndexOf("/"))):(d.push(a),a=a[l],j+="/"+l),!a))throw e(h);if(k&&"function"!=typeof a[k]&&(p=f(a,k,".js"),p||(p=f(a,k,".json")),p||(p=f(a,k,".css")),p||(p=f(a,k,".html")),p?k=p:2!==i&&"object"==typeof a[k]&&(d.push(a),a=a[k],j+="/"+k,k="")),!k)return 1!==i&&a[":mainpath:"]?b(a,d,a[":mainpath:"],h,1,j):b(a,d,"index",h,2,j);if(!(o=a[k]))throw e(h);return o.hasOwnProperty("module")?o.module.exports:(m={},o.module=n={exports:m,id:j+"/"+k},o.call(m,m,n,c(a,d,j)),n.exports)},d=function(c,d,f,g){var i,j=f,k=f.charAt(0),l=0;if("/"===k){if(j=j.slice(1),!(c=a["/"])){if(h)return h(f);throw e(f)}g="/",d=[]}else if("."!==k){if(i=j.split("/",1)[0],!(c=a[i])){if(h)return h(f);throw e(f)}g=i,d=[],j=j.slice(i.length+1),j||(j=c[":mainpath:"],j?l=1:(j="index",l=2))}return b(c,d,j,f,l,g)},(c=function(a,b,c){return function(e){return d(a,[].concat(b),e,c)}})(a,[],"")}({workspace:{"tcb-bridge":{assets:{js:{internal:{qna:{"_includes.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tTVE.Views.Components.question = require( './components/question' );\n\tTVE.Views.Components.answerItem = require( './components/answer-item' );\n\tTVE.Views.Components.Icon = require( './components/icon' )\n} )( jQuery );\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/qna/_includes.js")},components:{"answer-item.js":function(exports,module,require){eval("module.exports = TVE.Views.Base.component.extend( {\n\n\tafter_init: function () {\n\n\t\tTVE.add_filter( 'tcb_save_post_data_before', function ( data ) {\n\n\t\t\tvar config = TVE.Views.Controls.Palettes.prototype.getPaletteConfig( TVE.Editor_Page.editor.find( '.tqb-question-wrapper' ) );\n\t\t\tvar id = '';\n\n\t\t\tif ( ! jQuery.isEmptyObject( config ) ) {\n\n\t\t\t\tObject.keys( config.config.colors ).forEach( function ( item, _id ) {\n\t\t\t\t\tif ( config.config.colors[ item ].parent === - 1 ) {\n\t\t\t\t\t\tid = item;\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tTVE.Editor_Page.editor.find( '.tqb-answer-inner-wrapper' ).addClass( 'tqb-active-answer' );\n\t\t\t\tTVE.Editor_Page.editor.find( '.tqb-active-answer' ).head_css( {\n\t\t\t\t\t'background-color': 'var(--tcb-local-color-' + id + ')!important'\n\t\t\t\t}, TVE.main.responsive.desktop.media, '', '', '.tqb-active-answer:not(.tqb-rw)' );\n\t\t\t\tTVE.Editor_Page.editor.find( '.tqb-fancy-icon' ).head_css( {\n\t\t\t\t\t'background-color': 'var(--tcb-local-color-' + id + ')!important'\n\t\t\t\t}, TVE.main.responsive.desktop.media, '', '', '.tqb-active-answer:not(.tqb-rw) ' );\n\t\t\t\tTVE.Editor_Page.editor.find( '.tqb-fancy-container' ).head_css( {\n\t\t\t\t\t'background-color': 'var(--tcb-local-color-' + id + ')!important'\n\t\t\t\t}, TVE.main.responsive.desktop.media, '', '', '.tqb-active-answer:not(.tqb-rw) ' );\n\n\t\t\t\tdata.inline_rules = TVE.Editor_Page.content_manager.get_stylesheet_rules();\n\n\t\t\t\tTVE.Editor_Page.editor.find( '.tqb-answer-inner-wrapper' ).removeClass( 'tqb-active-answer' );\n\t\t\t}\n\n\t\t\treturn data;\n\t\t} );\n\t},\n} );\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/qna/components/answer-item.js")},"icon.js":function(exports,module,require){eval("var base = TVE.Views.Components.Icon;\n\nmodule.exports = base.extend( {\n\tcontrols_init: function () {\n\t\tbase.prototype.controls_init.apply( this, arguments );\n\n\t\tthis.controls.Slider.input = function ( $element, dom ) {\n\t\t\tvar css = {};\n\t\t\tvar self = this;\n\n\t\t\tthis.getCssProps().forEach( function ( prop ) {\n\t\t\t\tcss[ prop ] = dom.value + self.getUM() + '!important';\n\t\t\t} );\n\t\t\tthis.applyElementCss( css, $element, this.config.css_suffix, this.config.css_prefix );\n\t\t\tif ( ! TVE.SKIP_CSS_STATE && this.component.controls.StyleChange ) {\n\t\t\t\tthis.component.controls.StyleChange.update();\n\t\t\t}\n\t\t};\n\t},\n\n\tafter_update: function () {\n\t\tthis.controls.ToggleURL.$el.hide();\n\t}\n} );\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/qna/components/icon.js")},"question.js":function(exports,module,require){eval("( function ( $ ) {\n\tmodule.exports = TVE.Views.Base.component.extend( {\n\n\t\tbefore_update: function () {\n\t\t\tthis.generateInitialPalettes();\n\t\t},\n\n\t\tafter_update: function () {\n\t\t\tvar $fancyIcon = TVE.Editor_Page.editor.find( '.tqb-fancy-icon' );\n\n\t\t\tif ( $fancyIcon.attr( 'data-css' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$fancyIcon.head_css( {\n\t\t\t\t'top': '50%!important',\n\t\t\t\t'margin-top': '-' + $fancyIcon.height() / 2 + 'px'\n\t\t\t}, TVE.main.responsive.desktop.media );\n\t\t},\n\n\t\tgenerateInitialPalettes: function () {\n\n\t\t\tif ( ! TVE.ActiveElement ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar $element = this.controls.Palettes.config.to ? TVE.ActiveElement.find( this.controls.Palettes.config.to ) : TVE.ActiveElement;\n\t\t\tvar config = TVE.Views.Controls.Palettes.prototype.getPaletteConfig( $element );\n\t\t\tvar stop = ! config\n\t\t\t           || $.isEmptyObject( config )\n\t\t\t           //we only generate colors palettes once\n\t\t\t           || ( config.palettes[ config.active_palette ] && config.palettes[ config.active_palette ].original );\n\n\t\t\tif ( stop ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tTVE.Views.Controls.Palettes.prototype.onElementInsert();\n\n\t\t\t_.each( config.palettes[ 0 ].value.colors, function ( item, id ) {\n\t\t\t\tTVE.changeCssVariableValue( '--tcb-local-color-' + id, item.val, TVE.ActiveElement );\n\n\t\t\t\tif ( ! item.selector ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar prop = item.css_property ? item.css_property : 'background-color';\n\t\t\t\tvar callbacks = require( './../palettes-callbacks' );\n\t\t\t\tvar key = 'style_' + QNA.getQuizStyle();\n\n\t\t\t\tif ( typeof callbacks[ key ] === 'object' && typeof callbacks[ key ][ prop ] === 'function' ) {\n\t\t\t\t\tcallbacks[ key ][ prop ]( item, id );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\tresetQuestion: function () {\n\n\t\t\tQNA.resetPgModel();\n\n\t\t\tTVE.Editor_Page.editor.html( TVE.main.static_element( 'tqb_question' ).html() );\n\t\t\tTVE.Editor_Page.focus_element( TVE.Editor_Page.editor.find( '.tqb-question-wrapper' ) );\n\n\t\t\tQNA.elementIcons();\n\t\t}\n\t} );\n} )( jQuery )\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/qna/components/question.js")}},"elements.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tmodule.exports = {\n\n\t\t/**\n\t\t * elements slug and their css selectors\n\t\t */\n\t\tall: {\n\t\t\tquestionWrapper: '.tqb-question-wrapper',\n\t\t\tquestionContainer: '.tqb-question-container',\n\t\t\tquestionText: '.tqb-question-text',\n\t\t\tquestionDescription: '.tqb-question-description',\n\t\t\tanswersContainer: '.tqb-answers-container',\n\t\t\tanswerItem: '.tqb-editor-answer-wrapper',\n\t\t\tanswerImageItem: '.tqb-image-answer',\n\t\t\tanswerOpenItem: '.tqb-open-answer',\n\t\t\tanswerText: '.tqb-answer-text',\n\t\t\tprogressbarContainer: '.tqb-progress-container',\n\t\t\tprogressbarLabel: '.tqb-progress-label',\n\t\t\tprogress: '.tqb-progress',\n\t\t\tnextQuestion: '.tqb-button-holder',\n\t\t\tnextQuestionButton: '.tqb-next-button',\n\t\t\tanswerIcon: '.tqb-answer-icon',\n\t\t},\n\n\t\tdraggable: [\n\t\t\t'.tqb-question-text',\n\t\t\t'.tqb-question-description',\n\t\t\t'.tqb-question-image-container',\n\t\t\t'.tqb-progress-container',\n\t\t\t'.tqb-answers-container',\n\t\t\t'.tve_image_caption',\n\t\t\t'.tqb-label-container',\n\t\t],\n\n\t\tnotEditable: [\n\t\t\t'.tqb-answer-feedback-right',\n\t\t\t'.tqb-answer-feedback-wrong',\n\t\t\t'.tqb-feedback-right',\n\t\t\t'.tqb-feedback-wrong',\n\t\t\t'.tqb-editor-answer-wrapper',\n\t\t\t'.tqb-right',\n\t\t\t'.tqb-wrong',\n\t\t\t'.tqb-answer-text',\n\t\t\t'.tqb-progress',\n\t\t\t'.tqb-button-holder',\n\t\t\t'.tqb-next-button',\n\t\t\t'.tqb-answer-icon',\n\t\t],\n\n\t\tnoIcons: {\n\t\t\t'.tqb-question-wrapper': 'tve_no_icons',\n\t\t\t'.tqb-editor-answer-wrapper': 'tve_no_icons',\n\t\t\t'.tqb-right': 'tve_no_icons',\n\t\t\t'.tqb-wrong': 'tve_no_icons',\n\t\t\t'.tqb-answer-text': 'tve_no_icons',\n\t\t\t'.tqb-answer-feedback': 'tve_no_icons',\n\t\t\t'.tqb-feedback-text': 'tve_no_icons',\n\t\t\t'.tqb-button-holder': 'tve_no_icons',\n\t\t\t'.tqb-icon': 'tve_no_icons',\n\t\t\t'.tqb-next-button': 'tve_no_icons',\n\t\t\t'.tqb-answer-icon': 'tve_no_icons',\n\t\t\t'.tqb-image-answer-right': 'tve_no_icons',\n\t\t\t'.tqb-image-answer-wrong': 'tve_no_icons',\n\t\t\t'.tqb-question-container': 'tve_no_icons',\n\t\t\t'.tqb-question-text': 'tve_no_icons',\n\t\t\t'.tqb-question-description': 'tve_no_icons',\n\t\t\t'.tqb-progress-container': 'tve_no_icons',\n\t\t\t'.tqb-answers-container': 'tve_no_icons',\n\t\t\t'.tqb-progress-label': 'tve_no_icons',\n\t\t\t'.tqb-progress': 'tve_no_icons',\n\t\t\t'.thrv-columns': 'tve_no_icons',\n\t\t\t'.tcb-col': 'tve_no_icons',\n\t\t\t'.tqb-label-container': 'tve_no_icons',\n\t\t},\n\n\t\t/**\n\t\t * All elements css selectors\n\t\t * @return {string}\n\t\t */\n\t\tasString: function ( selectors ) {\n\t\t\treturn selectors + ',' + this.values().join( ',' );\n\t\t},\n\t\t/**\n\t\t * Slugs of elements\n\t\t * @return {string[]}\n\t\t */\n\t\tkeys: function () {\n\n\t\t\treturn Object.keys( this.all );\n\t\t},\n\t\t/**\n\t\t * array of css selectors\n\t\t * @return {[]}\n\t\t */\n\t\tvalues: function () {\n\t\t\tvar items = [];\n\n\t\t\t_.each( Object.keys( this.all ), function ( item ) {\n\t\t\t\titems.push( this.all[ item ] );\n\t\t\t}, this );\n\n\t\t\treturn items;\n\t\t},\n\t\t/**\n\t\t * Filter the data sent to server to be saved\n\t\t * - loops through each element and gets its outerHTML and append it to data to be saved in DB\n\t\t * @return {{}}\n\t\t */\n\t\tprepareTemplates: function ( data ) {\n\n\t\t\tvar $content = $( data.tve_content );\n\t\t\tvar templates = {};\n\t\t\tvar skipTpl = [ 'answerText', 'progress' ];\n\n\t\t\t_.each( this.all, function ( cssSelector, key ) {\n\n\t\t\t\tif ( skipTpl.includes( key ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar _fn = key + 'Template';\n\t\t\t\tvar template = '';\n\n\t\t\t\t/**\n\t\t\t\t * We pass a non referenced $content value to the callback function\n\t\t\t\t * Like this the callback can modify the content without affecting others actions\n\t\t\t\t */\n\t\t\t\tvar $ct = $( $content[ 0 ].outerHTML );\n\n\t\t\t\tif ( typeof this[ _fn ] === 'function' ) {\n\t\t\t\t\ttemplate = this[ _fn ]( cssSelector, $ct );\n\t\t\t\t}\n\n\t\t\t\tif ( template.length <= 0 ) {\n\t\t\t\t\ttemplate = this.defaultTemplate( cssSelector, $ct );\n\t\t\t\t}\n\n\t\t\t\ttemplates[ key ] = template;\n\t\t\t}, this );\n\n\t\t\tdata.qna_templates = {};\n\t\t\tdata.qna_templates[ QNA.getQuizStyle() ] = templates;\n\n\t\t\treturn data;\n\t\t},\n\t\t/**\n\t\t * Prepare template\n\t\t * @param {string} cssSelector\n\t\t * @param {jquery} $content\n\t\t * @return {string}\n\t\t */\n\t\tquestionTextTemplate: function ( cssSelector, $content ) {\n\t\t\treturn $( this.defaultTemplate( cssSelector, $content ) ).html( \"<span><#= item.get('text') #></span>\" )[ 0 ].outerHTML;\n\t\t},\n\n\t\t/**\n\t\t * Prepare template\n\t\t * @param {string} cssSelector\n\t\t * @param {jquery} $content\n\t\t * @return {string}\n\t\t */\n\t\tnextQuestionTemplate: function ( cssSelector, $content ) {\n\t\t\tvar $result = $content.find( cssSelector );\n\n\t\t\t$result.addClass( 'tqb-hide' );\n\n\t\t\treturn $result[ 0 ].outerHTML;\n\t\t},\n\n\t\t/**\n\t\t * Prepare template\n\t\t * @param {string} cssSelector\n\t\t * @param {jquery} $content\n\t\t * @return {string}\n\t\t */\n\t\tanswerTextTemplate: function ( cssSelector, $content ) {\n\n\t\t\tif ( ! $content.find( '.tqb-span-text' ).length ) {\n\t\t\t\t$content.find( '.tqb-answer-text' ).html( '<span class=\"tqb-span-text\"></span>' );\n\t\t\t}\n\n\t\t\t$content.find( '.tqb-span-text' ).html( \"<#= item.get('text') #>\" );\n\t\t},\n\n\t\t/**\n\t\t * Prepare template\n\t\t * @param {string} cssSelector\n\t\t * @param {jquery} $content\n\t\t * @return {string}\n\t\t */\n\t\tanswerItemTemplate: function ( cssSelector, $content ) {\n\n\t\t\tif ( ! $content.find( cssSelector ).length ) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\tvar $result = $content.find( cssSelector );\n\t\t\tvar connected = [\n\t\t\t\t'answerText',\n\t\t\t];\n\n\t\t\t_.each( connected, function ( conn ) {\n\n\t\t\t\tvar cb = conn + 'Template';\n\n\t\t\t\t$result.find( this.all[ conn ] ).html( this[ cb ]( this.all[ conn ], $result ) );\n\n\t\t\t}, this );\n\n\t\t\t$result.removeClass( 'tve-state-expanded tqb-right-answer' );\n\t\t\t$result.find( '.tqb-feedback-inner' ).empty();\n\t\t\t$result.find( '.tqb-answer-feedback' ).addClass( 'tqb-hide' );\n\n\t\t\treturn $result[ 0 ].outerHTML;\n\t\t},\n\n\t\t/**\n\t\t * Prepare template\n\t\t * @param {string} cssSelector\n\t\t * @param {jquery} $content\n\t\t * @return {string}\n\t\t */\n\t\tanswerImageItemTemplate: function ( cssSelector, $content ) {\n\n\t\t\tvar bgColor = TVE.Editor_Page.editor.find( '.tqb-editor-answer-wrapper' )\n\t\t\t                 .head_css( 'background-color', '', '.tve-state-expanded.tqb-editor-answer-wrapper' );\n\t\t\tvar $iconContainer = TVE.Editor_Page.editor.find( '.tqb-image-answer .tqb-fancy-container' );\n\n\t\t\t$iconContainer.find( '.tqb-image-answer .tqb-fancy-container' ).head_css(\n\t\t\t\t{'background-color': bgColor + '!important'},\n\t\t\t\tTVE.main.responsive.desktop.media,\n\t\t\t\t'.tve-state-expanded'\n\t\t\t);\n\t\t\t$content.find( '.tqb-image-answer .tqb-fancy-container' ).attr( 'data-css', $iconContainer.attr( 'data-css' ) );\n\n\t\t\treturn this.answerItemTemplate( cssSelector, $content );\n\t\t},\n\n\t\t/**\n\t\t * Prepare template\n\t\t * @param {string} cssSelector\n\t\t * @param {jquery} $content\n\t\t * @return {string}\n\t\t */\n\t\tanswerOpenItemTemplate: function ( cssSelector, $content ) {\n\n\t\t\tvar $result = $content.find( cssSelector );\n\n\t\t\t$result.removeClass( 'tqb-hide' );\n\n\t\t\treturn $result[ 0 ].outerHTML;\n\t\t},\n\n\t\t/**\n\t\t * Prepare template\n\t\t * @param {string} cssSelector\n\t\t * @param {jQuery} $content\n\t\t * @return {string}\n\t\t */\n\t\tprogressbarContainerTemplate: function ( cssSelector, $content ) {\n\t\t\t$content.find( '.tqb-progress-label span' ).html( \"<#= model.getPercentToDisplay() #>% <#= model.get( 'label_text' ) #>\" );\n\n\t\t\tvar tpl = \"<#= model.get( 'percentage' ) #>%\";\n\t\t\tvar css = 'calc( ' + tpl + ' )';\n\t\t\tvar $item = $content.find( '.tqb-progress-completed' );\n\t\t\tvar $html = $( '<div class=\"tqb-progress-completed\" data-css=\"' + $item.data( 'css' ) + '\" style=\"width: ' + css + '\"></div>' );\n\n\t\t\t$item.replaceWith( $html );\n\n\t\t\ttpl = \"<#= estimatedProgress #>%\";\n\t\t\tcss = 'calc( ' + tpl + ' )';\n\n\t\t\t$item = $content.find( '.tqb-next-item' );\n\t\t\t$html = $( '<div class=\"tqb-next-item\" data-css=\"' + $item.data( 'css' ) + '\" style=\"width: ' + css + '\"></div>' );\n\n\t\t\t$item.replaceWith( $html );\n\n\t\t\ttpl = \"<#= remaining #>%\";\n\t\t\tcss = 'calc( ' + tpl + ' )';\n\n\t\t\t$item = $content.find( '.tqb-remaining-completed' );\n\t\t\t$html = $( '<div class=\"tqb-remaining-completed\" data-css=\"' + $item.data( 'css' ) + '\" style=\"width: ' + css + '\"></div>' );\n\n\t\t\t$item.replaceWith( $html );\n\n\t\t\treturn $content.find( cssSelector )[ 0 ].outerHTML;\n\t\t},\n\t\t/**\n\t\t * Prepare template\n\t\t * @param {string} cssSelector\n\t\t * @param {jquery} $content\n\t\t * @return {string}\n\t\t */\n\t\tquestionDescriptionTemplate: function ( cssSelector, $content ) {\n\t\t\treturn $( this.defaultTemplate( cssSelector, $content ) ).html( \"<span><#= item.get('description') #></span>\" )[ 0 ].outerHTML;\n\t\t},\n\t\t/**\n\t\t * Prepare tpl for question wrapper\n\t\t * - empties all elements\n\t\t * @param {string} cssSelector\n\t\t * @param {jquery} $content\n\t\t * @return {string}\n\t\t */\n\t\tquestionWrapperTemplate: function ( cssSelector, $content ) {\n\t\t\tvar $element = $content.closest( cssSelector );\n\n\t\t\tif ( $element.length <= 0 ) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\t_.each( this.all, function ( cssSelector ) {\n\t\t\t\t$element.find( cssSelector ).empty();\n\t\t\t} );\n\n\t\t\t$element.find( '.thrive-colors-palette-config' ).remove();\n\n\t\t\treturn $element[ 0 ].outerHTML;\n\t\t},\n\n\t\t/**\n\t\t * Prepare tpl for question container\n\t\t * @param {string} cssSelector\n\t\t * @param {jquery} $content\n\t\t * @return {string}\n\t\t */\n\t\tquestionContainerTemplate: function ( cssSelector, $content ) {\n\t\t\tvar $element = $content.find( cssSelector );\n\t\t\tvar $elClone = jQuery( $element[ 0 ].outerHTML );\n\n\t\t\t_.each( this.all, function ( cssSelector ) {\n\t\t\t\t$element.find( cssSelector ).empty();\n\t\t\t} );\n\n\t\t\t$element.find( '.tqb-question-text' ).html( \"<#= item.get('text') #>\" );\n\t\t\t$element.find( '.tqb-question-description' )\n\t\t\t        .replaceWith(\n\t\t\t\t        \"<# if (item.get('description') ) { #>\" +\n\t\t\t\t        '<div class=\"tqb-question-description\">' +\n\t\t\t\t        \"<#= item.get('description') #>\" +\n\t\t\t\t        '</div>' +\n\t\t\t\t        '<# } #>'\n\t\t\t        );\n\t\t\t$element.find( '.tqb-question-description' )\n\t\t\t        .attr( 'data-css', $elClone.find( '.tqb-question-description' ).attr( 'data-css' ) );\n\n\t\t\treturn $element[ 0 ].outerHTML;\n\t\t},\n\n\t\t/**\n\t\t * Prepare tpl for answers container\n\t\t * @param {string} cssSelector\n\t\t * @param {jquery} $content\n\t\t * @return {string}\n\t\t */\n\t\tanswersContainerTemplate: function ( cssSelector, $content ) {\n\t\t\treturn this.defaultTemplate( cssSelector, $content );\n\t\t},\n\n\t\t/**\n\t\t * Prepare tpl for feedback\n\t\t * @param {string} cssSelector\n\t\t * @param {jquery} $content\n\t\t * @return {string}\n\t\t */\n\t\tanswerIconTemplate: function ( cssSelector, $content ) {\n\t\t\treturn TVE.Editor_Page.editor.find( cssSelector )[ 0 ].outerHTML;\n\t\t},\n\n\t\t/**\n\t\t * Prepare tpl for progress bar label\n\t\t * @param {string} cssSelector\n\t\t * @param {jquery} $content\n\t\t * @return {string}\n\t\t */\n\t\tprogressbarLabelTemplate: function ( cssSelector, $content ) {\n\n\t\t\tvar $result = $content.find( cssSelector );\n\n\t\t\t$result.find( 'span' ).html( \"<#= model.getPercentToDisplay() #>% <#= model.get( 'label_text' ) #>\" );\n\n\t\t\treturn $result[ 0 ].outerHTML;\n\t\t},\n\n\t\t/**\n\t\t * Empty the element and return its outerHTML\n\t\t * @param {string} cssSelector\n\t\t * @param {jquery} $content\n\t\t * @return {string}\n\t\t */\n\t\tdefaultTemplate: function ( cssSelector, $content ) {\n\t\t\tvar $element = $content.find( cssSelector );\n\t\t\t$element.empty();\n\t\t\treturn $element.length ? $element[ 0 ].outerHTML : '';\n\t\t}\n\t};\n} )( jQuery );\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/qna/elements.js")},"palettes-callbacks.js":function(exports,module,require){eval("var colorCb = function ( item, id ) {\n\tvar $element = TVE.ActiveElement.find( item.selector );\n\tvar globalVar = TVE.CONST.colors.local_prefix + 'var';\n\tvar globalIcon = TVE.CONST.colors.local_prefix + 'icon';\n\tvar css = {\n\t\t'color': 'var(--tcb-local-color-' + id + ') !important',\n\t\t'--tve-applied-color': 'var(--tcb-local-color-' + id + ')'\n\t};\n\n\tif ( $element.is( '.tqb-icon' ) ) {\n\t\tcss[ globalVar ] = 'var(--tcb-local-color-' + id + ')';\n\t\tcss[ globalIcon ] = 'var(--tcb-local-color-' + id + ')';\n\t}\n\n\t$element.head_css( css, TVE.main.responsive.desktop.media );\n}\n\nvar bgColorCb = function ( item, id ) {\n\tTVE.ActiveElement.find( item.selector ).head_css(\n\t\t{'background-color': 'var(--tcb-local-color-' + id + ') !important'},\n\t\tTVE.main.responsive.desktop.media\n\t)\n}\n\nvar borderColorCb = function ( item, id ) {\n\tTVE.ActiveElement.find( item.selector ).head_css(\n\t\t{'border-color': 'var(--tcb-local-color-' + id + ') !important'},\n\t\tTVE.main.responsive.desktop.media,\n\t)\n}\n\nmodule.exports = {\n\tstyle_5: {\n\t\t'background-image': function ( item, id ) {\n\t\t\tvar gradient = item.gradient_val;\n\t\t\tvar config = TVE.Views.Controls.Palettes.prototype.getPaletteConfig( TVE.ActiveElement );\n\t\t\tvar suffix = '';\n\n\t\t\t_.each( item.gradient_colors, function ( color ) {\n\n\t\t\t\tvar cssVar = 'var(--tcb-local-color-' + color + ')';\n\t\t\t\tvar colorObj = config.palettes[ 0 ].value.colors[ color ];\n\n\t\t\t\tgradient = gradient.replace( colorObj.val, cssVar );\n\t\t\t} );\n\n\t\t\tTVE.state_manager.set_state( 'hover' );\n\n\t\t\tif ( item.selector === '.tve-state-expanded.tqb-active-answer' ) {\n\t\t\t\tTVE.state_manager.set_state( 'expanded' );\n\n\t\t\t\tsuffix = '.tve-state-expanded.tqb-active-answer';\n\t\t\t\tTVE.ActiveElement.find( '.tqb-editor-answer-wrapper' ).addClass( 'tve-state-expanded tqb-active-answer tcb-group-editing-item' );\n\t\t\t}\n\n\t\t\tTVE.ActiveElement.find( item.selector ).head_css(\n\t\t\t\t{'background-image': gradient + '!important'},\n\t\t\t\tTVE.main.responsive.desktop.media,\n\t\t\t\tsuffix\n\t\t\t);\n\n\t\t\tif ( item.selector === '.tve-state-expanded.tqb-active-answer' ) {\n\t\t\t\tTVE.ActiveElement.find( '.tqb-editor-answer-wrapper' ).removeClass( 'tve-state-expanded tqb-active-answer tcb-group-editing-item' );\n\t\t\t}\n\n\t\t\tTVE.state_manager.set_state();\n\t\t},\n\t\t'background-color': function ( item, id ) {\n\n\t\t\tTVE.ActiveElement.find( '.tqb-answer-inner-wrapper' ).head_css( {\n\t\t\t\t'background-color': '#2b8635 !important',\n\t\t\t\t'border-color': '#2b8635 !important'\n\t\t\t}, TVE.main.responsive.desktop.media, '.tve-state-expanded.tqb-right' );\n\n\t\t\tTVE.ActiveElement.find( '.tqb-answer-inner-wrapper' ).head_css( {\n\t\t\t\t'background-color': '#ab0016 !important',\n\t\t\t\t'border-color': '#ab0016 !important'\n\t\t\t}, TVE.main.responsive.desktop.media, '.tve-state-expanded.tqb-wrong' );\n\n\t\t\tbgColorCb( item, id )\n\t\t},\n\t\t'color': colorCb,\n\t\t'border-color': function ( item, id ) {\n\n\t\t\tvar $element = TVE.ActiveElement.find( item.selector );\n\n\t\t\t$element.head_css(\n\t\t\t\t{'border-color': 'var(--tcb-local-color-' + id + ') !important'},\n\t\t\t\tTVE.main.responsive.desktop.media,\n\t\t\t\t':hover'\n\t\t\t)\n\t\t\t$element.head_css(\n\t\t\t\t{'border-color': 'var(--tcb-local-color-' + id + ') !important'},\n\t\t\t\tTVE.main.responsive.desktop.media,\n\t\t\t\t':focus'\n\t\t\t)\n\t\t}\n\t},\n\tstyle_4: {\n\t\t'background-color': function ( item, id ) {\n\t\t\tTVE.state_manager.set_state( 'hover' );\n\n\t\t\tTVE.ActiveElement.find( item.selector ).head_css(\n\t\t\t\t{'background-color': 'var(--tcb-local-color-' + id + ') !important'},\n\t\t\t\tTVE.main.responsive.desktop.media,\n\t\t\t\t':not(.tqb-disable-answer)',\n\t\t\t\tnull,\n\t\t\t\t' .no-touch '\n\t\t\t);\n\n\t\t\tTVE.Editor_Page.editor.find( '.tqb-answer-inner-wrapper' ).head_css(\n\t\t\t\t{'background-color': 'var(--tcb-local-color-' + id + ') !important'},\n\t\t\t\tTVE.main.responsive.desktop.media,\n\t\t\t\t':not(.tqb-disable-answer) .tqb-fancy-container',\n\t\t\t\tnull,\n\t\t\t\t' .no-touch '\n\t\t\t);\n\n\t\t\tTVE.ActiveElement.find( item.selector ).head_css(\n\t\t\t\t{'background-color': 'var(--tcb-local-color-' + id + ') !important'},\n\t\t\t\tTVE.main.responsive.desktop.media,\n\t\t\t\t':not(.tqb-disable-answer) .tqb-fancy-icon',\n\t\t\t\tnull,\n\t\t\t\t' .no-touch '\n\t\t\t);\n\n\t\t\tTVE.state_manager.set_state();\n\n\t\t\tif ( [ '.tqb-progress-completed', '.tqb-next-item' ].includes( item.selector ) ) {\n\t\t\t\tbgColorCb( item, id );\n\t\t\t}\n\t\t},\n\t\t'color': colorCb,\n\t\t'border-color': function ( item, id ) {\n\t\t\tTVE.state_manager.set_state( 'hover' );\n\n\t\t\tTVE.Editor_Page.editor.find( item.selector ).head_css(\n\t\t\t\t{'border-color': 'var(--tcb-local-color-' + id + ') !important'},\n\t\t\t\tTVE.main.responsive.desktop.media\n\t\t\t);\n\n\t\t\tTVE.state_manager.set_state( 'focus' );\n\n\t\t\tTVE.Editor_Page.editor.find( item.selector ).head_css(\n\t\t\t\t{'border-color': 'var(--tcb-local-color-' + id + ') !important'},\n\t\t\t\tTVE.main.responsive.desktop.media\n\t\t\t);\n\n\t\t\tTVE.state_manager.set_state( '' );\n\t\t}\n\t},\n\tstyle_3: {\n\t\t'background-color': bgColorCb,\n\t\t'box-shadow': function ( item, id ) {\n\t\t\tTVE.Views.Components.Shadow.prototype.collection = new Backbone.Collection()\n\t\t\tTVE.Views.Components.Shadow.prototype.tabs = {}\n\t\t\tTVE.Views.Components.Shadow.prototype.config = {}\n\t\t\tTVE.Views.Components.Shadow.prototype.tabs.panels = []\n\n\t\t\tvar css = TVE.ActiveElement.find( item.selector ).head_css( 'box-shadow', false, '', true, '' );\n\t\t\tvar collection = TVE.Views.Components.Shadow.prototype.parseCss( css );\n\n\t\t\tif ( collection.length ) {\n\t\t\t\tcollection.at( 0 ).set( {color: 'var(--tcb-local-color-' + id + ')'} );\n\t\t\t\tvar attrs = TVE.Views.Components.Shadow.prototype.buildShadowAttribute( collection );\n\n\t\t\t\tTVE.ActiveElement.find( item.selector ).head_css(\n\t\t\t\t\t{'box-shadow': attrs + '!important'},\n\t\t\t\t\tTVE.main.responsive.desktop.media\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tdelete TVE.Views.Components.Shadow.prototype.collection;\n\t\t\tdelete TVE.Views.Components.Shadow.prototype.config;\n\t\t\tdelete TVE.Views.Components.Shadow.prototype.tabs.panels\n\t\t},\n\t},\n\tstyle_2: {\n\t\t'background-color': function ( item, id ) {\n\n\t\t\tif ( TVE.ActiveElement.find( item.selector ).is( '.tqb-answer-inner-wrapper' ) ) {\n\t\t\t\tTVE.state_manager.set_state( 'hover' );\n\t\t\t}\n\n\t\t\tTVE.ActiveElement.find( item.selector ).head_css(\n\t\t\t\t{'background-color': 'var(--tcb-local-color-' + id + ') !important'},\n\t\t\t\tTVE.main.responsive.desktop.media\n\t\t\t)\n\t\t\tTVE.state_manager.set_state( '' );\n\t\t},\n\t\t'color': colorCb,\n\t},\n\tstyle_1: {\n\t\t'background-color': function ( item, id ) {\n\n\t\t\tif ( item.selector === '.tqb-answer-inner-wrapper:not(.tqb-open-ended-wrapper):hover' ) {\n\t\t\t\tTVE.state_manager.set_state( 'hover' );\n\t\t\t\titem.selector = '.tqb-answer-inner-wrapper:not(.tqb-open-ended-wrapper)';\n\t\t\t}\n\n\t\t\tTVE.ActiveElement.find( item.selector ).head_css(\n\t\t\t\t{'background-color': 'var(--tcb-local-color-' + id + ') !important'},\n\t\t\t\tTVE.main.responsive.desktop.media\n\t\t\t)\n\t\t\tTVE.state_manager.set_state( '' );\n\t\t},\n\t\t'color': colorCb,\n\t\t'border-color': borderColorCb\n\t},\n\tstyle_0: {\n\t\t'background-color': function ( item, id ) {\n\n\t\t\tif ( item.selector === '.tqb-answer-inner-wrapper:not(.tqb-open-ended-wrapper)' ) {\n\t\t\t\tTVE.state_manager.set_state( 'hover' );\n\t\t\t}\n\n\t\t\tTVE.ActiveElement.find( item.selector ).head_css(\n\t\t\t\t{'background-color': 'var(--tcb-local-color-' + id + ') !important'},\n\t\t\t\tTVE.main.responsive.desktop.media\n\t\t\t)\n\t\t\tTVE.state_manager.set_state( '' );\n\t\t},\n\t\t'border-color': borderColorCb,\n\t\t'color': colorCb,\n\t}\n}\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/qna/palettes-callbacks.js")}},"qna.js":function(exports,module,require){
eval("var pgModel = Backbone.Model.extend( {\n\tshow: function () {\n\t\treturn 1 === parseInt( this.get( 'display_progress' ) );\n\t},\n\tgetPercentage: function () {\n\t\treturn this.get( 'percent_type' ) === 'percentage_completed' ? 33 : 67;\n\t},\n\tgetDefaultLabel: function () {\n\t\treturn this.get( 'percent_type' ) === 'percentage_completed' ? 'COMPLETED' : 'REMAINING';\n\t}\n} );\n\nvar pgModelInstance;\n\n( function ( $ ) {\n\n\trequire( './qna/_includes' );\n\n\tvar qnaElements = require( './qna/elements' );\n\n\tQNA = window.QNA || {};\n\n\tQNA.getQuizStyle = function () {\n\t\tif ( this.data && this.data.quiz && this.data.quiz.style ) {\n\t\t\treturn this.data.quiz.style;\n\t\t}\n\t\treturn null;\n\t}\n\n\tQNA.elementIcons = function () {\n\t\t_.each( qnaElements.noIcons, function ( cls, element ) {\n\t\t\tTVE.Editor_Page.editor.find( element ).addClass( cls );\n\t\t} );\n\t}\n\n\tQNA.getPgModel = function () {\n\n\t\tif ( ! ( pgModelInstance instanceof pgModel ) ) {\n\t\t\tpgModelInstance = new pgModel( TVE.inner.window.tve_frontend_options.qna_data.pg_settings );\n\t\t}\n\n\t\treturn pgModelInstance;\n\t}\n\n\tQNA.resetPgModel = function () {\n\t\tpgModelInstance = null;\n\t}\n\n\t/**\n\t * Get editable elements selectors\n\t *\n\t * @returns {string}\n\t */\n\tfunction editable( selectors ) {\n\n\t\treturn selectors + ',' + _.filter( qnaElements.all, function ( item ) {\n\t\t\treturn ! qnaElements.notEditable.includes( item );\n\t\t} ).join( ', ' );\n\t}\n\n\t/**\n\t * Get non draggable elements\n\t *\n\t * @param selectors\n\t * @returns {string}\n\t */\n\tfunction nonDraggable( selectors ) {\n\t\tvar qnaSelectors = '';\n\n\t\tObject.keys( qnaElements.all ).forEach( function ( item ) {\n\t\t\tqnaSelectors += ',' + qnaElements.all[ item ]\n\t\t} );\n\n\t\treturn selectors + qnaSelectors;\n\t}\n\n\t/**\n\t * Main entry point vor visual question editor\n\t */\n\tfunction onTcbMainReady() {\n\n\t\tif ( ! TVE ) {\n\t\t\treturn;\n\t\t}\n\n\t\tTVE.add_filter( 'selectors_mouseover', editable );\n\t\tTVE.add_filter( 'selectors_editable', editable );\n\t\tTVE.add_filter( 'non_draggable', nonDraggable );\n\t\tTVE.add_filter( 'tcb_save_post_data_after', _.bind( qnaElements.prepareTemplates, qnaElements ) );\n\t\tTVE.add_filter( 'tcb.components.hide', function ( hide, componentKey, type ) {\n\n\t\t\t/**\n\t\t\t * We never want animation component active\n\t\t\t */\n\t\t\tif ( componentKey === 'animation' ) {\n\t\t\t\thide = true;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * No components needed for next-question-button except for main one\n\t\t\t */\n\t\t\tif ( TVE.ActiveElement && TVE.ActiveElement.is( '.tqb-next-icon' ) ) {\n\t\t\t\thide = componentKey !== 'icon';\n\t\t\t}\n\n\t\t\treturn hide;\n\t\t} );\n\t\tTVE.add_filter( 'tcb.components.expanded_key', function ( component_key, type ) {\n\n\t\t\tif ( [ 'tqb_question_text', 'tqb_question_description', 'tqb_progress_bar_label' ].includes( type ) ) {\n\t\t\t\tcomponent_key = 'typography';\n\t\t\t}\n\n\t\t\treturn component_key;\n\t\t} );\n\t\tTVE.add_filter( 'tcb_element_variables', function ( $element ) {\n\n\t\t\tif ( $element.is( '.tqb-progress-container' ) ) {\n\t\t\t\t$element = $element.find( '.tqb-progress' );\n\t\t\t}\n\n\t\t\treturn $element;\n\t\t} );\n\t\tTVE.add_filter( 'tcb.write.shadow.suffix.tqb_answers_container', function ( sufix, css_attr ) {\n\n\t\t\tif ( 'text-shadow' === css_attr ) {\n\t\t\t\tsufix = ' .tqb-span-text';\n\t\t\t}\n\n\t\t\treturn sufix;\n\t\t} );\n\n\t\tTVE.add_action( 'tcb-ready', function () {\n\n\t\t\tvar qna_data = TVE.inner.window.tve_frontend_options.qna_data;\n\t\t\t$.extend( QNA, {data: qna_data} );\n\n\t\t\tTVE.Editor_Page.focus_element( TVE.Editor_Page.editor.find( '.tqb-question-wrapper' ) );\n\t\t\tQNA.elementIcons();\n\n\t\t\tTVE.main.$el.find( '#tcb-post-option-breadcrumb' ).addClass( 'tcb-hide' );\n\t\t} );\n\n\t\t/**\n\t\t * We never want to show lock/unlock icons for items in group editing\n\t\t *\n\t\t * @param state\n\t\t */\n\t\tTVE.Views.Components.Group.prototype.handle_icons = function ( state ) {\n\t\t\tTVE.ElementEditIcons.$lock.toggle( false );\n\t\t\tTVE.ElementEditIcons.$unlock.toggle( false );\n\t\t\tTVE.main.$( '[data-view=\"ButtonToggle\"]' ).hide();\n\t\t}\n\n\t\tTVE.Views.Controls.DropPanel.prototype.after_open = function () {\n\n\t\t\tif ( ! TVE.ActiveElement ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( TVE.ActiveElement.is( '.tqb-question-wrapper, .tqb-progress-container' ) ) {\n\t\t\t\tthis.$( '.sp-favorites-container' ).addClass( 'tcb-hidden' );\n\t\t\t}\n\t\t}\n\t}\n\n\t$( window ).on( 'tcb_main_ready', onTcbMainReady );\n} )( jQuery );\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/qna.js")}}}}}}})("workspace/tcb-bridge/assets/js/internal/qna");