// This file was generated by modules-webmake (modules for web) project.
// See: https://github.com/medikoo/modules-webmake

(function (modules) {
	'use strict';

	var resolve, getRequire, wmRequire, notFoundError, findFile
	  , extensions = {".js":[],".json":[],".css":[],".html":[]}
	  , envRequire = typeof require === 'function' ? require : null;

	notFoundError = function (path) {
		var error = new Error("Could not find module '" + path + "'");
		error.code = 'MODULE_NOT_FOUND';
		return error;
	};
	findFile = function (scope, name, extName) {
		var i, ext;
		if (typeof scope[name + extName] === 'function') return name + extName;
		for (i = 0; (ext = extensions[extName][i]); ++i) {
			if (typeof scope[name + ext] === 'function') return name + ext;
		}
		return null;
	};
	resolve = function (scope, tree, path, fullPath, state, id) {
		var name, dir, exports, module, fn, found, ext;
		path = path.split('/');
		name = path.pop();
		if ((name === '.') || (name === '..')) {
			path.push(name);
			name = '';
		}
		while ((dir = path.shift()) != null) {
			if (!dir || (dir === '.')) continue;
			if (dir === '..') {
				scope = tree.pop();
				id = id.slice(0, id.lastIndexOf('/'));
			} else {
				tree.push(scope);
				scope = scope[dir];
				id += '/' + dir;
			}
			if (!scope) throw notFoundError(fullPath);
		}
		if (name && (typeof scope[name] !== 'function')) {
			found = findFile(scope, name, '.js');
			if (!found) found = findFile(scope, name, '.json');
			if (!found) found = findFile(scope, name, '.css');
			if (!found) found = findFile(scope, name, '.html');
			if (found) {
				name = found;
			} else if ((state !== 2) && (typeof scope[name] === 'object')) {
				tree.push(scope);
				scope = scope[name];
				id += '/' + name;
				name = '';
			}
		}
		if (!name) {
			if ((state !== 1) && scope[':mainpath:']) {
				return resolve(scope, tree, scope[':mainpath:'], fullPath, 1, id);
			}
			return resolve(scope, tree, 'index', fullPath, 2, id);
		}
		fn = scope[name];
		if (!fn) throw notFoundError(fullPath);
		if (fn.hasOwnProperty('module')) return fn.module.exports;
		exports = {};
		fn.module = module = { exports: exports, id: id + '/' + name };
		fn.call(exports, exports, module, getRequire(scope, tree, id));
		return module.exports;
	};
	wmRequire = function (scope, tree, fullPath, id) {
		var name, path = fullPath, t = fullPath.charAt(0), state = 0;
		if (t === '/') {
			path = path.slice(1);
			scope = modules['/'];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = '/';
			tree = [];
		} else if (t !== '.') {
			name = path.split('/', 1)[0];
			scope = modules[name];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = name;
			tree = [];
			path = path.slice(name.length + 1);
			if (!path) {
				path = scope[':mainpath:'];
				if (path) {
					state = 1;
				} else {
					path = 'index';
					state = 2;
				}
			}
		}
		return resolve(scope, tree, path, fullPath, state, id);
	};
	getRequire = function (scope, tree, id) {
		return function (path) {
			return wmRequire(scope, [].concat(tree), path, id);
		};
	};
	return getRequire(modules, [], '');
})({
	"workspace": {
		"assets": {
			"js": {
				"frontend": {
					"main.js": function (exports, module, require) {
						eval("/**\n * Required in frontend only, when a variation is displayed\n * - to allow TCB trigger ajax request for custom html forms to register conversion on TOP\n * - to register impressions for a variation by TD Lazy Loading\n */\nvar ThriveGlobal = ThriveGlobal || {$j: jQuery.noConflict()};\n\nThriveAB = ThriveAB || {};\n\n(function ( $ ) {\n\n\t/**\n\t * DOM Ready\n\t */\n\t$( function () {\n\t\t//hook into dashboard ajax request\n\t\tThriveAB.dashboard_hook();\n\t} );\n\n\t/**\n\t * In case on current variation exists a LG Element with custom html\n\t * we need to set some data on submit() event to allow conversions to be registered\n\t */\n\tif ( typeof ThriveAB.test_type !== 'undefined' && ThriveAB.test_type === 'optins' ) {\n\t\t$( 'body' ).off( 'should_submit_form.tcb' ).on( 'should_submit_form.tcb', '.thrv_lead_generation', function ( event ) {\n\t\t\tevent.flag_need_data = true;\n\t\t\treturn true;\n\t\t} );\n\t}\n\n\t/**\n\t * Try to hook into dashboard ajax lazy load request\n\t * and inject some data to pe processed by TOP on server, usually register impression\n\t */\n\tThriveAB.dashboard_hook = function () {\n\n\t\tif ( typeof TVE_Dash === 'undefined' || TVE_Dash.ajax_sent === true ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$( document ).on( 'tve-dash.load', function () {\n\t\t\t/**\n\t\t\t * assign some data on dash request to be caught on server\n\t\t\t * @see Thrive_AB_Ajax:dashboard_lazy_load()\n\t\t\t */\n\t\t\tTVE_Dash.add_load_item( 'top_lazy_load', ThriveAB.impression_data );\n\t\t} );\n\t};\n\n})( ThriveGlobal.$j );\n//# sourceURL=workspace/assets/js/frontend/main.js");
					}
				}
			}
		}
	}
})("workspace/assets/js/frontend/main");
