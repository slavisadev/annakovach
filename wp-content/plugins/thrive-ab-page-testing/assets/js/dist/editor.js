// This file was generated by modules-webmake (modules for web) project.
// See: https://github.com/medikoo/modules-webmake

(function (modules) {
	'use strict';

	var resolve, getRequire, wmRequire, notFoundError, findFile
	  , extensions = {".js":[],".json":[],".css":[],".html":[]}
	  , envRequire = typeof require === 'function' ? require : null;

	notFoundError = function (path) {
		var error = new Error("Could not find module '" + path + "'");
		error.code = 'MODULE_NOT_FOUND';
		return error;
	};
	findFile = function (scope, name, extName) {
		var i, ext;
		if (typeof scope[name + extName] === 'function') return name + extName;
		for (i = 0; (ext = extensions[extName][i]); ++i) {
			if (typeof scope[name + ext] === 'function') return name + ext;
		}
		return null;
	};
	resolve = function (scope, tree, path, fullPath, state, id) {
		var name, dir, exports, module, fn, found, ext;
		path = path.split('/');
		name = path.pop();
		if ((name === '.') || (name === '..')) {
			path.push(name);
			name = '';
		}
		while ((dir = path.shift()) != null) {
			if (!dir || (dir === '.')) continue;
			if (dir === '..') {
				scope = tree.pop();
				id = id.slice(0, id.lastIndexOf('/'));
			} else {
				tree.push(scope);
				scope = scope[dir];
				id += '/' + dir;
			}
			if (!scope) throw notFoundError(fullPath);
		}
		if (name && (typeof scope[name] !== 'function')) {
			found = findFile(scope, name, '.js');
			if (!found) found = findFile(scope, name, '.json');
			if (!found) found = findFile(scope, name, '.css');
			if (!found) found = findFile(scope, name, '.html');
			if (found) {
				name = found;
			} else if ((state !== 2) && (typeof scope[name] === 'object')) {
				tree.push(scope);
				scope = scope[name];
				id += '/' + name;
				name = '';
			}
		}
		if (!name) {
			if ((state !== 1) && scope[':mainpath:']) {
				return resolve(scope, tree, scope[':mainpath:'], fullPath, 1, id);
			}
			return resolve(scope, tree, 'index', fullPath, 2, id);
		}
		fn = scope[name];
		if (!fn) throw notFoundError(fullPath);
		if (fn.hasOwnProperty('module')) return fn.module.exports;
		exports = {};
		fn.module = module = { exports: exports, id: id + '/' + name };
		fn.call(exports, exports, module, getRequire(scope, tree, id));
		return module.exports;
	};
	wmRequire = function (scope, tree, fullPath, id) {
		var name, path = fullPath, t = fullPath.charAt(0), state = 0;
		if (t === '/') {
			path = path.slice(1);
			scope = modules['/'];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = '/';
			tree = [];
		} else if (t !== '.') {
			name = path.split('/', 1)[0];
			scope = modules[name];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = name;
			tree = [];
			path = path.slice(name.length + 1);
			if (!path) {
				path = scope[':mainpath:'];
				if (path) {
					state = 1;
				} else {
					path = 'index';
					state = 2;
				}
			}
		}
		return resolve(scope, tree, path, fullPath, state, id);
	};
	getRequire = function (scope, tree, id) {
		return function (path) {
			return wmRequire(scope, [].concat(tree), path, id);
		};
	};
	return getRequire(modules, [], '');
})({
	"workspace": {
		"assets": {
			"js": {
				"editor.js": function (exports, module, require) {
					eval("( function ( $ ) {\n\tTVE.ResetStatsModal = require( './modals/reset-stats' );\n\tvar ThriveAB = {\n\t\tselector: 'body',\n\t\tiframe_srcs: [],\n\t\tinit: function () {\n\t\t\tvar self = this;\n\t\t\tif ( TVE.CONST.ajax.thrive_ab.running_test ) {\n\t\t\t\tTVE.add_filter( 'validate_saved_content', $.proxy( this.validate_saved_content_filter, this ) );\n\t\t\t} else {\n\t\t\t\tTVE.main.on( 'tve.save_post.success', $.proxy( this.on_save, this ) );\n\t\t\t}\n\n\t\t\t/* disable \"CREATE NEW A/B TEST\" button when an element enters edit mode */\n\t\t\tTVE.add_filter( 'tcb.edit_mode.disabled_buttons', function ( $buttons ) {\n\t\t\t\treturn $buttons.add( TVE.main.$( '#thrive-ab-create-test' ) );\n\t\t\t} );\n\t\t},\n\t\tvalidate_saved_content_filter: function ( valid, callback ) {\n\t\t\tvar self = this;\n\t\t\tself.save_callback = callback;\n\t\t\tif ( typeof TVE.CONST.reset_stats === 'undefined' ) {\n\n\t\t\t\tvar ResetStatsModal = TVE.ResetStatsModal.get_instance( TVE.modal.get_element( 'reset-stats' ) );\n\n\t\t\t\tResetStatsModal.open( {\n\t\t\t\t\ttop: '20%'\n\t\t\t\t} );\n\t\t\t\tdelete TVE.KEEP_OVERLAY;\n\t\t\t\tTVE.main.overlay( 'close' );\n\t\t\t\tResetStatsModal.on( 'reset_stats', self.save_with_reset_stats, self );\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( ! TVE.CONST.reset_stats ) {\n\t\t\t\tdelete TVE.CONST.reset_stats;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\t\tsave_with_reset_stats: function ( running_test ) {\n\t\t\tTVE.main.overlay();\n\t\t\tTVE.CONST.reset_stats = running_test;\n\t\t\tthis.on_save();\n\t\t},\n\n\t\ton_save: function () {\n\t\t\tif ( ! TVE.PreventPreviewImageGenerate ) {\n\t\t\t\tvar $element = TVE.inner_$( this.selector );\n\t\t\t\tTVE.generateElementPreview( $element, this.save.bind( this ), {\n\t\t\t\t\tbgcolor: 'white',\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tpadding: 0,\n\t\t\t\t\t\tmargin: 0,\n\t\t\t\t\t\toutline: 'none',\n\t\t\t\t\t\t'overflow-y': 'hidden'\n\t\t\t\t\t},\n\t\t\t\t\twidth: $element.width(),\n\t\t\t\t\theight: 1000,\n\t\t\t\t\timageTypeCallback: 'toJpeg'\n\t\t\t\t}, true );\n\t\t\t}\n\t\t},\n\n\t\tsave: function ( data_source ) {\n\t\t\tvar form = new FormData();\n\n\t\t\tif ( data_source ) {\n\t\t\t\tform.append( 'preview_file', TVE.base64ToBlob( data_source ), TVE.CONST.post_id + '.png' );\n\t\t\t}\n\n\t\t\tform.append( 'custom', 'save_variation_thumb' );\n\t\t\tform.append( 'action', TVE.CONST.ajax.thrive_ab.action );\n\t\t\tform.append( 'post_id', TVE.CONST.post_id );\n\n\t\t\tif ( typeof TVE.CONST.reset_stats !== 'undefined' ) {\n\t\t\t\tform.append( 'reset_data', TVE.CONST.reset_stats );\n\t\t\t}\n\n\t\t\t$.ajax( {\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: TVE.CONST.ajax_url,\n\t\t\t\tdata: form,\n\t\t\t\tprocessData: false,\n\t\t\t\tcontentType: false,\n\t\t\t} );\n\t\t\tif ( typeof TVE.CONST.reset_stats !== 'undefined' ) {\n\t\t\t\tTVE.main.editor_settings.save( null, null, this.save_callback );\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction check_editor() {\n\n\t\tif ( TVE.inner === undefined ) {\n\t\t\treturn setTimeout( check_editor, 100 );\n\t\t}\n\t\tThriveAB.init();\n\t}\n\n\tcheck_editor();\n\n} )( jQuery );\n//# sourceURL=workspace/assets/js/editor.js");
				},
				"modals": {
					"reset-stats.js": function (exports, module, require) {
						eval("var _instance = null;\n\nmodule.exports = TVE.modal.base.extend( {\n\tevents: function () {\n\t\treturn _.extend( {}, TVE.modal.base.prototype.events(), {\n\t\t\t'click .tcb-modal-save': 'reset_stats'\n\t\t} );\n\t},\n\treset_stats: function () {\n\t\tthis.running_test = false;\n\n\t\tif ( this.$( '#thrive-ab-reset-stats' ).is( ':checked' ) ) {\n\t\t\tthis.running_test = TVE.CONST.ajax.thrive_ab.running_test;\n\t\t}\n\n\t\tthis.trigger('reset_stats', this.running_test );\n\t\tTVE.main.overlay();\n\t\tthis.close();\n\t},\n\tafter_initialize: function () {\n\t\tthis.$el.addClass( 'medium' );\n\t}\n}, {\n\t/**\n\t * \"Singleton\" implementation for modal instance\n\t *\n\t * @param el\n\t */\n\tget_instance: function ( el ) {\n\t\tif ( ! _instance ) {\n\t\t\t_instance = new TVE.ResetStatsModal( {\n\t\t\t\tel: el\n\t\t\t} );\n\t\t}\n\n\t\treturn _instance;\n\t}\n} );\n//# sourceURL=workspace/assets/js/modals/reset-stats.js");
					}
				}
			}
		}
	}
})("workspace/assets/js/editor");
