"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// This file was generated by modules-webmake (modules for web) project.
// See: https://github.com/medikoo/modules-webmake
(function (modules) {
  'use strict';

  var _resolve,
      getRequire,
      wmRequire,
      notFoundError,
      findFile,
      extensions = {
    ".js": [],
    ".json": [],
    ".css": [],
    ".html": []
  },
      envRequire = typeof require === 'function' ? require : null;

  notFoundError = function notFoundError(path) {
    var error = new Error("Could not find module '" + path + "'");
    error.code = 'MODULE_NOT_FOUND';
    return error;
  };

  findFile = function findFile(scope, name, extName) {
    var i, ext;
    if (typeof scope[name + extName] === 'function') return name + extName;

    for (i = 0; ext = extensions[extName][i]; ++i) {
      if (typeof scope[name + ext] === 'function') return name + ext;
    }

    return null;
  };

  _resolve = function resolve(scope, tree, path, fullPath, state, id) {
    var name, dir, exports, module, fn, found, ext;
    path = path.split('/');
    name = path.pop();

    if (name === '.' || name === '..') {
      path.push(name);
      name = '';
    }

    while ((dir = path.shift()) != null) {
      if (!dir || dir === '.') continue;

      if (dir === '..') {
        scope = tree.pop();
        id = id.slice(0, id.lastIndexOf('/'));
      } else {
        tree.push(scope);
        scope = scope[dir];
        id += '/' + dir;
      }

      if (!scope) throw notFoundError(fullPath);
    }

    if (name && typeof scope[name] !== 'function') {
      found = findFile(scope, name, '.js');
      if (!found) found = findFile(scope, name, '.json');
      if (!found) found = findFile(scope, name, '.css');
      if (!found) found = findFile(scope, name, '.html');

      if (found) {
        name = found;
      } else if (state !== 2 && _typeof(scope[name]) === 'object') {
        tree.push(scope);
        scope = scope[name];
        id += '/' + name;
        name = '';
      }
    }

    if (!name) {
      if (state !== 1 && scope[':mainpath:']) {
        return _resolve(scope, tree, scope[':mainpath:'], fullPath, 1, id);
      }

      return _resolve(scope, tree, 'index', fullPath, 2, id);
    }

    fn = scope[name];
    if (!fn) throw notFoundError(fullPath);
    if (fn.hasOwnProperty('module')) return fn.module.exports;
    exports = {};
    fn.module = module = {
      exports: exports,
      id: id + '/' + name
    };
    fn.call(exports, exports, module, getRequire(scope, tree, id));
    return module.exports;
  };

  wmRequire = function wmRequire(scope, tree, fullPath, id) {
    var name,
        path = fullPath,
        t = fullPath.charAt(0),
        state = 0;

    if (t === '/') {
      path = path.slice(1);
      scope = modules['/'];

      if (!scope) {
        if (envRequire) return envRequire(fullPath);
        throw notFoundError(fullPath);
      }

      id = '/';
      tree = [];
    } else if (t !== '.') {
      name = path.split('/', 1)[0];
      scope = modules[name];

      if (!scope) {
        if (envRequire) return envRequire(fullPath);
        throw notFoundError(fullPath);
      }

      id = name;
      tree = [];
      path = path.slice(name.length + 1);

      if (!path) {
        path = scope[':mainpath:'];

        if (path) {
          state = 1;
        } else {
          path = 'index';
          state = 2;
        }
      }
    }

    return _resolve(scope, tree, path, fullPath, state, id);
  };

  getRequire = function getRequire(scope, tree, id) {
    return function (path) {
      return wmRequire(scope, [].concat(tree), path, id);
    };
  };

  return getRequire(modules, [], '');
})({
  "workspace": {
    "inc": {
      "assets": {
        "js": {
          "frontend": {
            "woocommerce": {
              "_includes.js": function _includesJs(exports, module, require) {
                var Woo = require('./main')(ThriveTheme.$, window, typeof TCB_Front === 'undefined' ? {} : TCB_Front);

                Woo.initializeWooCommerceFunctionality();
              },
              "main.js": function mainJs(exports, module, require) {
                module.exports = function ($) {
                  var _window = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;

                  var TCB_Front = arguments.length > 2 ? arguments[2] : undefined;

                  /**
                   * Main Woo entry point that initializes the models and the hooks
                   */
                  var Woo =
                  /*#__PURE__*/
                  function () {
                    function Woo() {
                      _classCallCheck(this, Woo);
                    }

                    _createClass(Woo, null, [{
                      key: "initializeWooCommerceFunctionality",
                      value: function initializeWooCommerceFunctionality() {
                        /* only do this part if TCB_Front exists */
                        if (typeof TCB_Front !== 'undefined' && Object.keys(TCB_Front).length > 0) {
                          var Product = require('./models/product')($, _window),
                              Checkout = require('./models/checkout')($, _window),
                              Cart = require('./models/cart')($, _window);

                          ThriveTheme.Product = new Product();
                          ThriveTheme.Checkout = new Checkout();
                          ThriveTheme.Cart = new Cart();

                          if (!tve_frontend_options.is_editor_page) {
                            var ShopTemplate = require('./models/shop')($, _window);
                            /* init the shop template ( there can be only one ) */


                            ThriveTheme.ShopTemplate = new ShopTemplate($(_window.document).find(ShopTemplate.selector));
                          }

                          Woo.initHooks();
                        }
                      }
                    }, {
                      key: "initHooks",
                      value: function initHooks() {
                        Woo.initQuantityButtons();
                        $(document).ready(function () {
                          Woo.initCartContentClass();
                        });
                      }
                      /**
                       * Listeners for +/- buttons near add to cart
                       */

                    }, {
                      key: "initQuantityButtons",
                      value: function initQuantityButtons() {
                        $(document).on('click', '.tve-woo-quantity-button', function (event) {
                          var $input = $(event.currentTarget).siblings('input[type="number"]'),
                              quantity = Number($input.val());

                          switch (event.currentTarget.dataset.op) {
                            case 'plus':
                              $input.val(quantity + 1);
                              break;

                            case 'minus':
                              /* don't go under min */
                              if (quantity > $input.attr('min')) {
                                $input.val(quantity - 1);
                              }

                              break;

                            default:
                              break;
                          }

                          $input.trigger('change');
                        });
                      }
                      /**
                       * Add the hf-section / theme-section class to the cart content in order for selectors to target this properly
                       * Reason for adding these classes:
                       * The CSS selectors for cart-content look like this: .theme-prefix .section-prefix <style>, but the cart content is not physically inside the section
                       * The solution is to simulate the cart content being in the section by adding the section class to it
                       */

                    }, {
                      key: "initCartContentClass",
                      value: function initCartContentClass() {
                        $('body').on('tcb_mini_cart_content_generated', function (event, miniCartObject) {
                          var $miniCart = miniCartObject.$cart;
                          var selector = '';
                          /* we only cover unlinked HF, the linked ones are handled by the symbol implementation in the TCB frontend */

                          if ($miniCart.closest('.thrv_header').length > 0) {
                            selector = 'thrv_header';
                          } else if ($miniCart.closest('.thrv_footer').length > 0) {
                            selector = 'thrv_footer';
                          } else {
                            var $themeSection = $miniCart.closest('.theme-section');

                            if ($themeSection.length > 0) {
                              /* dynamic or static? */
                              var dynamicSectionSelector = $themeSection.attr('class').match(/(thrive-section-\d*)/g);

                              if (dynamicSectionSelector) {
                                /* the section dynamic selector is 'thrive-section-X' */
                                selector = dynamicSectionSelector[0];
                              } else {
                                var type = $themeSection.prop('id').match(/theme-(.*)-section/)[1];
                                selector = "".concat(type, "-section");
                              }
                            }
                          }

                          if (selector.length) {
                            miniCartObject.$cartContentWrapper.addClass(selector);
                          }
                        });
                      }
                    }]);

                    return Woo;
                  }();

                  return Woo;
                };
              },
              "models": {
                "abstract.js": function abstractJs(exports, module, require) {
                  module.exports = function (_window) {
                    /**
                     * Extend AbstractWoo from TCB in order to get most of the functionality.
                     * Override some functions that need to behave differently in the theme.
                     */
                    var AbstractWoo =
                    /*#__PURE__*/
                    function (_window$TCB_Front$woo) {
                      _inherits(AbstractWoo, _window$TCB_Front$woo);

                      function AbstractWoo() {
                        _classCallCheck(this, AbstractWoo);

                        return _possibleConstructorReturn(this, _getPrototypeOf(AbstractWoo).apply(this, arguments));
                      }

                      _createClass(AbstractWoo, [{
                        key: "ajaxRenderFunction",

                        /**
                         * Ajax call for a specific function so we can render it server side.
                         * @param {String} fnKey
                         * @param {Object} args
                         * @param {boolean} outputBuffer
                         * @param {String} type
                         * @return {*}
                         */
                        value: function ajaxRenderFunction(fnKey, args) {
                          var _this = this;

                          var outputBuffer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
                          var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'POST';
                          var fn = AbstractWoo.backendRenderFunction(fnKey);
                          this.loading(true);
                          return TVE.$.ajax({
                            url: "".concat(TVE.CONST.theme.routes.woo, "/render"),
                            type: type,
                            data: {
                              fn: fn,
                              args: args,
                              output_buffer: outputBuffer ? 1 : 0,
                              query_vars: TVE.Theme.CONST.query_vars
                            },
                            headers: {
                              'X-WP-Nonce': TVE.CONST.rest_nonce
                            }
                          }).always(function (response) {
                            _this.loading(false);
                          });
                        }
                        /**
                         * Toggle loading spinner on the template
                         * Overwrites loading() from TCB in order to change the class ( we add 'ttb-loading' instead of 'tve-loader-square' )
                         * @param toggle
                         */

                      }, {
                        key: "loading",
                        value: function loading() {
                          var toggle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
                          this.$template.toggleClass('ttb-loading', toggle);
                        }
                        /**
                         * Backend functions for specific products sections
                         * @param section
                         * @return {*}
                         */

                      }], [{
                        key: "backendRenderFunction",
                        value: function backendRenderFunction(section) {
                          var callbacks = {
                            related: 'woocommerce_related_products',
                            upsells: 'woocommerce_upsell_display',
                            shop: 'woocommerce_content'
                          };
                          return callbacks[section];
                        }
                      }]);

                      return AbstractWoo;
                    }(_window.TCB_Front.woocommerce.AbstractWoo);

                    return AbstractWoo;
                  };
                },
                "cart.js": function cartJs(exports, module, require) {
                  module.exports = function ($, _window) {
                    var Abstract = require('./abstract')(_window);

                    var CartTemplate =
                    /*#__PURE__*/
                    function (_Abstract) {
                      _inherits(CartTemplate, _Abstract);

                      _createClass(CartTemplate, [{
                        key: "initializeSelectors",

                        /**
                         * Initialize selectors in the cart template
                         */
                        value: function initializeSelectors() {
                          var _this3 = this;

                          //disable coupon code and the quantity selector
                          $(TVE.identifier('wc-cart-product-quantity')).find('input').attr('readonly', 'readonly');
                          $(TVE.identifier('wc-cart-coupon-input')).attr('readonly', 'readonly'); //This element is paired with the "update cart" button which is disabled until something
                          //changes to one of the quantities, to be able to select it we need to enable it.

                          $(TVE.identifier('wc-cart-update-button')).prop('disabled', false);
                          CartTemplate.subElements.forEach(function (elementType) {
                            var selector = TVE.identifier(elementType),
                                $elements = _this3.$template.find(selector);

                            $elements.each(function (index, element) {
                              element.classList.add('tve_no_icons');
                              element.classList.add('wc-element-cursor');
                              element.setAttribute('data-selector', selector);
                            });
                          });
                          /* make sure the main product wrapper is not editable */

                          this.$template.find(TVE.identifier('article')).addClass('tcb-selector-not_editable tcb-selector-no_highlight');
                        }
                      }], [{
                        key: "subElements",
                        get: function get() {
                          return ['wc-cart-table-headers', 'wc-cart-product-image', 'wc-cart-product-name', 'wc-cart-product-price', 'wc-cart-product-quantity', 'wc-cart-coupon-input', 'wc-cart-apply-coupon', 'wc-cart-update-button', 'wc-cart-details', 'wc-cart-details-header', 'wc-cart-details-row-header', 'wc-cart-price', 'wc-cart-active-shipping', 'wc-cart-shipping-method', 'wc-cart-shipping-text', 'wc-cart-shipping-address', 'wc-cart-change-address', 'wc-cart-to-checkout-button', 'wc-cart-product-list', 'wc-cart-related-heading', 'wc-cart-related-product-image', 'wc-cart-related-product-title', 'wc-cart-related-product-price', 'wc-cart-related-product-button', 'wc-cart-remove-product'];
                        }
                      }]);

                      function CartTemplate($element) {
                        var _this2;

                        _classCallCheck(this, CartTemplate);

                        _this2 = _possibleConstructorReturn(this, _getPrototypeOf(CartTemplate).call(this, $element)); //We have to modify the quantity element's structure so we can properly edit the elements on mobile/tablet

                        $('.cart tbody .product-quantity:not(:has(>div))').each(function () {
                          $(this).wrapInner("<div class = 'quantity'></div>");
                        });
                        $(_window.document.body).on('updated_shipping_method', function (event) {
                          //after woo cleans the element we must add the class/event(only for the payment method radio buttons) again
                          $('.shipping input:checked').next('label').addClass('checked');
                        });

                        if (_window.tve_frontend_options.is_editor_page) {
                          _this2.initializeSelectors();
                        }

                        return _this2;
                      }

                      return CartTemplate;
                    }(Abstract);

                    return CartTemplate;
                  };
                },
                "checkout.js": function checkoutJs(exports, module, require) {
                  module.exports = function ($) {
                    var _window = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;

                    var Abstract = require('./abstract')(_window);

                    var CheckoutTemplate =
                    /*#__PURE__*/
                    function (_Abstract2) {
                      _inherits(CheckoutTemplate, _Abstract2);

                      _createClass(CheckoutTemplate, [{
                        key: "initializeSelectors",

                        /**
                         * Initialize selectors in the checkout template
                         */
                        value: function initializeSelectors() {
                          var _this6 = this;

                          $(TVE.identifier('wc-input-box')).attr('readonly', 'readonly');
                          /**
                           * Prevent the default woocommerce dropdown from opening when clicked inside the editor
                           * The blur must be applied after the dropdown's mousedown event is triggered, hence the timeout.
                           * */

                          $(TVE.identifier('wc-dropdown')).on('mousedown', function () {
                            var _this5 = this;

                            setTimeout(function () {
                              return _this5.blur();
                            }, 0);
                          });
                          CheckoutTemplate.subElements.forEach(function (elementType) {
                            var selector = TVE.identifier(elementType),
                                $elements = _this6.$template.find(selector);

                            $elements.each(function (index, element) {
                              element.classList.add('tve_no_icons');
                              element.classList.add('wc-element-cursor');
                              element.setAttribute('data-selector', selector);
                            });
                          });
                        }
                      }], [{
                        key: "subElements",
                        get: function get() {
                          return ['wc-input-label', 'wc-input-box', 'wc-textarea-input', 'wc-field-header', 'wc-ordered-product-name', 'wc-order-details-header', 'wc-ordered-product-price', 'wc-final-price', 'wc-checked-shipping-method', 'wc-unchecked-shipping-method', 'wc-place-order-button', 'wc-checked-payment-method', 'wc-unchecked-payment-method', 'wc-payment-method-description', 'wc-privacy-policy', 'wc-dropdown', 'wc-additional-section', 'wc-additional-section-anchor', 'wc-paypal-info'];
                        }
                      }]);

                      function CheckoutTemplate($element) {
                        var _this4;

                        _classCallCheck(this, CheckoutTemplate);

                        _this4 = _possibleConstructorReturn(this, _getPrototypeOf(CheckoutTemplate).call(this, $element));
                        /*
                        *	Adding an additional class to the labels of the radio button checked so we can identify it
                        * (the first one is done so that while the shipping methods section is reloading the style will be kept)
                        * */

                        _this4.addNecessaryClasses();

                        $(_window.document.body).on('updated_checkout', function (event, args) {
                          //after woo cleans the element we must add the class/event(only for the payment method radio buttons) again
                          if (args.result === 'success') {
                            _this4.addNecessaryClasses();

                            $("#payment .input-radio").click(function () {
                              $('#payment .checked').removeClass("checked");
                              $('#payment input:checked').parent('li').addClass('checked');
                            });
                          }
                        });

                        if (_window.tve_frontend_options.is_editor_page) {
                          _this4.initializeSelectors();
                        }

                        return _this4;
                      }
                      /**
                       * Adding classes that are necessary so that WooCommerce does not interfere with our elements
                       */


                      _createClass(CheckoutTemplate, [{
                        key: "addNecessaryClasses",
                        value: function addNecessaryClasses() {
                          $('#shipping_method input:checked').next('label').addClass('checked').find('span, bdi').addClass('checked');
                          $('#payment input:checked').parent('li').addClass('checked');
                          /**
                           * Links inside the product purchase note from checkout confirmation should inherit TTB link typography, since the page is not editable
                           * In order to achieve this, we add a text class to the <td> containing the purchase note text
                           */

                          $('.woocommerce-table .product-purchase-note td').addClass('thrv_text_element');
                        }
                      }]);

                      return CheckoutTemplate;
                    }(Abstract);

                    return CheckoutTemplate;
                  };
                },
                "product.js": function productJs(exports, module, require) {
                  module.exports = function ($, _window) {
                    var Abstract = require('./abstract')(_window);

                    var ProductTemplate =
                    /*#__PURE__*/
                    function (_Abstract3) {
                      _inherits(ProductTemplate, _Abstract3);

                      _createClass(ProductTemplate, null, [{
                        key: "subElements",
                        get: function get() {
                          var subElements = ['wc-product-short-description', 'wc-product-main-add-to-cart', 'wc-product-add-to-cart', 'wc-product-star-rating', 'wc-product-category', 'wc-product-category-links', 'wc-product-sku', 'wc-product-gallery', 'wc-product-image', 'wc-product-title', 'wc-product-price', 'wc-product-out-of-stock', 'wc-product-sale', 'wc-product-tags', 'wc-product-tags-links', 'wc-product-customer-review-count', 'wc-product-quantity', 'wc-product-select', 'wc-product-select-label', 'wc-product-tab', 'wc-product-description-content', 'wc-product-additional-label', 'wc-product-additional-value', 'wc-product-upsells-heading', 'wc-product-related-heading', 'wc-product-review-empty-text', 'wc-product-review-first-text', 'wc-product-review-label', 'wc-product-review-star-rating', 'wc-product-review-textarea', 'wc-product-review-submit', 'wc-product-review-author', 'wc-product-review-author-image', 'wc-product-review-date', 'wc-product-review-comment', 'wc-product-review-item-star-rating', 'wc-product-review-container', 'wc-product-review-only-logged-in-text'];

                          if (ProductTemplate.isProductAddonPluginActive()) {
                            subElements = [].concat(_toConsumableArray(subElements), ['wc-product-add-on-title', 'wc-product-add-on-description', 'wc-product-add-on-text-field', 'wc-product-add-on-remaining-characters', 'wc-product-add-on-dropdown', 'wc-product-add-on-checkbox', 'wc-product-add-on-radio-button', 'wc-product-add-on-product-name', 'wc-product-add-on-product-price']);
                          }

                          return subElements;
                        }
                        /**
                         * @return {string}
                         */

                      }, {
                        key: "selector",
                        get: function get() {
                          return '.product-template-wrapper';
                        }
                        /**
                         * @return {string}
                         */

                      }, {
                        key: "gallerySelector",
                        get: function get() {
                          return '.woocommerce-product-gallery';
                        }
                      }]);

                      function ProductTemplate() {
                        var _this7;

                        var $element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

                        _classCallCheck(this, ProductTemplate);

                        _this7 = _possibleConstructorReturn(this, _getPrototypeOf(ProductTemplate).call(this, $element));

                        if (_this7.$template.length) {
                          _this7.ID = parseInt(_this7.$template.find('.post-wrapper.product ').attr('id').replace('product-', ''));
                          _this7.$gallery = _this7.$template.find(ProductTemplate.gallerySelector);
                        } //add a specific class for some addons specific elements


                        if (ProductTemplate.isProductAddonPluginActive()) {
                          _this7.$template.find('.wc-pao-addon-container p:has(.wc-pao-addon-radio)').addClass('addon-radio-button');

                          _this7.$template.find('.wc-pao-addon-container p:has(.wc-pao-addon-checkbox)').addClass('addon-checkbox');
                        }

                        _this7.init();

                        return _this7;
                      }
                      /**
                       * Initialize selectors in the product template
                       */


                      _createClass(ProductTemplate, [{
                        key: "initializeSelectors",
                        value: function initializeSelectors() {
                          var _this8 = this;

                          if (ProductTemplate.isProductAddonPluginActive()) {
                            $(TVE.identifier('wc-product-add-on-dropdown')).on('mousedown', function (e) {
                              return e.preventDefault();
                            });
                            $(TVE.identifier('wc-product-add-on-text-field')).attr('readonly', 'readonly');
                          }

                          ['.upsells', '.related'].forEach(function (selector) {
                            return _this8.$template.find(selector).attr('data-selector', "".concat(selector, ".products"));
                          });
                          ProductTemplate.subElements.forEach(function (elementType) {
                            var selector = TVE.identifier(elementType),
                                $element = _this8.$template.find(selector);

                            $element.each(function (index, element) {
                              var prefix = TVE.identifier('product-template');
                              var section = element.closest('.products[data-selector]');

                              if (section) {
                                prefix = selector.includes(section.dataset.selector) ? prefix : "".concat(prefix, " ").concat(section.dataset.selector);
                              } else if (element.closest('.woocommerce-tabs')) {
                                prefix = "".concat(prefix, " .woocommerce-tabs");
                              } else if (element.closest('.summary')) {
                                prefix = "".concat(prefix, " .summary");
                              }

                              element.classList.add('tve_no_icons');
                              element.classList.add('wc-element-cursor');
                              element.setAttribute('data-selector', selector.split(',').map(function (sel) {
                                return "".concat(prefix, " ").concat(sel);
                              }).join(', '));
                            });
                          });
                          /* make sure the main product wrapper is not editable */

                          this.$template.find(TVE.identifier('article')).addClass('tcb-selector-not_editable tcb-selector-no_highlight');
                          /* the comment form must not be editable either */

                          this.$template.find('#respond').addClass('tcb-selector-not_editable tcb-selector-no_highlight');
                          var $addToCart = this.$template.find('.single_add_to_cart_button');
                          /* make the 'Add to cart' button clickable in the editor ( sometimes it's not clickable because of variation selects ) */

                          $addToCart.removeClass('disabled wc-variation-selection-needed');
                          /* mark this as editable so we can handle this case separately when we're in TCB */

                          if (TVE.CONST.theme.is_theme_template) {
                            this.$template.find('.post-wrapper.product ').addClass('thrive-woocommerce-product-editable');
                          }
                        }
                      }, {
                        key: "init",
                        value: function init() {
                          this.toggleZoom();

                          if (_window.tve_frontend_options.is_editor_page) {
                            this.initializeSelectors();
                          }
                        }
                        /**
                         * Toggle zoom settings
                         * @return {ProductTemplate}
                         */

                      }, {
                        key: "toggleZoom",
                        value: function toggleZoom() {
                          if (typeof _window.wc_single_product_params !== 'undefined') {
                            _window.wc_single_product_params.zoom_enabled = !parseInt(this.$template.attr('data-hide-magnifier'));
                          }

                          return this;
                        }
                        /**
                         * Trigger init for tabs from the template
                         * @return {ProductTemplate}
                         */

                      }, {
                        key: "tabsInit",
                        value: function tabsInit() {
                          this.$template.find('.wc-tabs-wrapper, .woocommerce-tabs, #rating').trigger('init');
                          return this;
                        }
                        /**
                         * Select tab on the product template
                         * @param tab
                         */

                      }, {
                        key: "selectTab",
                        value: function selectTab() {
                          var tab = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'description';
                          var $tabsWrapper = TVE.Theme.$wrapper.find("".concat(ProductTemplate.selector, " .woocommerce-tabs"));

                          if ($tabsWrapper.length) {
                            $tabsWrapper.find('.wc-tabs > .active').removeClass('active');
                            /* hide the currently shown tab content */

                            $tabsWrapper.find('.wc-tab').hide();
                            var $tabTitle = $tabsWrapper.find("#tab-title-".concat(tab)),
                                $tabContent;

                            if ($tabTitle.length) {
                              $tabContent = $tabsWrapper.find("#tab-".concat(tab));
                            } else {
                              $tabTitle = $tabsWrapper.find('.wc-tabs').children().first();
                              $tabContent = $tabsWrapper.find('.wc-tab').first();
                            }

                            $tabTitle.addClass('active');
                            $tabContent.show();
                          }
                        }
                        /**
                         * Find all gallery elements and reinitialize them
                         * @return {ProductTemplate}
                         */

                      }, {
                        key: "redoGallery",
                        value: function redoGallery() {
                          this.$gallery.each(function (index, element) {
                            var $gallery = $(element);
                            $gallery.trigger('wc-product-gallery-before-init', [element, _window.wc_single_product_params]);
                            $gallery.wc_product_gallery(_window.wc_single_product_params);
                            $gallery.trigger('wc-product-gallery-after-init', [element, _window.wc_single_product_params]);
                          });
                          return this;
                        }
                        /**
                         * Replace the columns class on the gallery element
                         * @param columns
                         */

                      }, {
                        key: "updateGalleryColumnsClass",
                        value: function updateGalleryColumnsClass(columns) {
                          if (typeof columns === 'undefined') {
                            columns = this.getData('gallery-columns');
                          }

                          var galleryClass = this.$gallery.attr('class');
                          galleryClass = galleryClass.replace(/woocommerce-product-gallery--columns-\d/g, "woocommerce-product-gallery--columns-".concat(columns));
                          this.$gallery.attr('class', galleryClass);
                        }
                        /**
                         * Generate a 'View Cart' button where CSS rules can be saved and persist
                         *
                         * @param $container
                         */

                      }, {
                        key: "initializeProductViewCartButtons",
                        value: function initializeProductViewCartButtons($container) {
                          $container.find('.ajax_add_to_cart').removeClass('ajax_add_to_cart');

                          var $addToCartButtons = $container.find('.add_to_cart_button'),
                              $addedToCartButtons = $container.find('a.added_to_cart'),
                              appendAddedToCartButton = function appendAddedToCartButton() {
                            $addToCartButtons.after('<a class="added_to_cart" style="display:none;"></div>');
                          };

                          if ($addedToCartButtons.length === 0) {
                            appendAddedToCartButton();
                          } else if ($addToCartButtons.length !== $addedToCartButtons.length) {
                            /* if, for some reason, we have a different count of button types, remove the 'added to cart' buttons and re-add them */
                            $addedToCartButtons.remove();
                            appendAddedToCartButton();
                          }
                        }
                        /**
                         * Get the related products again based on the data attributes
                         * @param {String} section
                         * @param {Array} dataArgs
                         */

                      }, {
                        key: "updateProductsSection",
                        value: function updateProductsSection(section) {
                          var _this9 = this;

                          var dataArgs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['columns', 'posts_per_page', 'orderby', 'order'];
                          var args = {};
                          dataArgs.forEach(function (arg) {
                            args[arg] = _this9.getData(arg, section);
                          });
                          return this.ajaxRenderFunction(section, args).done(function (response) {
                            if (response.content) {
                              _this9.getProductsSection(section).html($(response.content).html());
                            }

                            _this9.initializeProductViewCartButtons(_this9.$template);

                            _this9.initializeSelectors();
                          });
                        }
                        /**
                         * Default values for data attributes
                         * Overwrites the attributes from TCB Abstract's defaultAttr()
                         * @param key
                         * @return {*}
                         */

                      }], [{
                        key: "defaultAttr",
                        value: function defaultAttr() {
                          var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
                          var defaults = {
                            'align-items': 'left',
                            'related-align-items': 'left',
                            'upsells-align-items': 'left',
                            'columns': 4,
                            'gallery-columns': 4,
                            'related-columns': 4,
                            'upsells-columns': 4,
                            'posts_per_page': 8,
                            'related-posts_per_page': 4,
                            'upsells-posts_per_page': 4,
                            'orderby': 'date',
                            'related-orderby': 'rand',
                            'upsells-orderby': 'rand',
                            'order': 'desc',
                            'related-order': 'desc',
                            'upsells-order': 'desc',
                            'hide-related': false,
                            'hide-magnifier': false
                          };
                          return key ? defaults[key] : defaults;
                        }
                        /**
                         * Check if the product add-ons plugin is active
                         * @returns {boolean}
                         */

                      }, {
                        key: "isProductAddonPluginActive",
                        value: function isProductAddonPluginActive() {
                          return _window.tve_frontend_options.woocommerce_related_plugins.product_addons;
                        }
                      }]);

                      return ProductTemplate;
                    }(Abstract);

                    return ProductTemplate;
                  };
                },
                "shop.js": function shopJs(exports, module, require) {
                  module.exports = function ($, _window) {
                    var AbstractWoo = require('./abstract')(_window);
                    /**
                     * This class implements frontend functionality for the TTB shop template.
                     * For everything related to the TCB shop element, check the frontend/woo folder from TCB
                     */


                    var ShopTemplate =
                    /*#__PURE__*/
                    function (_window$TCB_Front$woo2) {
                      _inherits(ShopTemplate, _window$TCB_Front$woo2);

                      function ShopTemplate() {
                        _classCallCheck(this, ShopTemplate);

                        return _possibleConstructorReturn(this, _getPrototypeOf(ShopTemplate).apply(this, arguments));
                      }

                      _createClass(ShopTemplate, [{
                        key: "updateProductsSection",

                        /**
                         * Reload the products list of the shop template
                         * @param {String} section
                         * @param {Array} dataArgs
                         */
                        value: function updateProductsSection() {
                          var _this10 = this;

                          var section = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
                          var dataArgs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['columns', 'posts_per_page', 'orderby', 'order'];
                          var args = {};
                          dataArgs.forEach(function (arg) {
                            args[arg] = _this10.getData(arg);
                          });
                          /* not very OOP, but since we don't have multiple inheritance, here's an ascii pitchfork ----€ */

                          var ThemeAbstractWoo = new AbstractWoo(this.$template);
                          return ThemeAbstractWoo.ajaxRenderFunction('shop', args).done(function (response) {
                            if (response.content) {
                              _this10.$template.html(response.content);

                              _this10.toggleProductElements();

                              _this10.initializeCartButtons(_this10.$template);

                              TVE.WooCommerceFn.content.initShopSubElements(_this10.$template);
                            }
                          });
                        }
                      }], [{
                        key: "selector",

                        /**
                         * @return {string}
                         */
                        get: function get() {
                          return '.shop-template-wrapper';
                        }
                      }]);

                      return ShopTemplate;
                    }(_window.TCB_Front.woocommerce.Shop);

                    return ShopTemplate;
                  };
                }
              }
            }
          }
        }
      }
    }
  }
})("workspace/inc/assets/js/frontend/woocommerce/_includes");
